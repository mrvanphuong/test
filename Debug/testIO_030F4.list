
testIO_030F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003214  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003304  08003304  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003304  08003304  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003304  08003304  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800330c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000010  08003318  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003318  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083f6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001848  00000000  00000000  0002842a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002a698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b991  00000000  00000000  0002aff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076fe  00000000  00000000  00036981  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000437a7  00000000  00000000  0003e07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00081826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  000818a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032bc 	.word	0x080032bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080032bc 	.word	0x080032bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <increase_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void increase_time(uint8_t* flag){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (*flag) {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d01b      	beq.n	8000268 <increase_time+0x48>
		(RO_time)++;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <increase_time+0x50>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <increase_time+0x50>)
 8000238:	601a      	str	r2, [r3, #0]
		(PP2_time)++;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <increase_time+0x54>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	1c5a      	adds	r2, r3, #1
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <increase_time+0x54>)
 8000242:	601a      	str	r2, [r3, #0]
		(UDF_time)++;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <increase_time+0x58>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	1c5a      	adds	r2, r3, #1
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <increase_time+0x58>)
 800024c:	601a      	str	r2, [r3, #0]
		(PP1_time)++;
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <increase_time+0x5c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	1c5a      	adds	r2, r3, #1
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <increase_time+0x5c>)
 8000256:	601a      	str	r2, [r3, #0]
		(Machine_time)++;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <increase_time+0x60>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	1c5a      	adds	r2, r3, #1
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <increase_time+0x60>)
 8000260:	601a      	str	r2, [r3, #0]
		*flag=0;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
	}
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	b002      	add	sp, #8
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000070 	.word	0x20000070
 8000274:	200000b8 	.word	0x200000b8
 8000278:	20000074 	.word	0x20000074
 800027c:	200000bc 	.word	0x200000bc
 8000280:	200000c0 	.word	0x200000c0

08000284 <Writte_flash>:

void Writte_flash(uint32_t start_Adress, uint32_t End_Adress){
 8000284:	b5b0      	push	{r4, r5, r7, lr}
 8000286:	b08c      	sub	sp, #48	; 0x30
 8000288:	af00      	add	r7, sp, #0
 800028a:	61f8      	str	r0, [r7, #28]
 800028c:	61b9      	str	r1, [r7, #24]
	HAL_FLASH_Unlock();
 800028e:	f001 fc91 	bl	8001bb4 <HAL_FLASH_Unlock>
			FLASH_EraseInitTypeDef EraseInitStruct;
			EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000292:	210c      	movs	r1, #12
 8000294:	2018      	movs	r0, #24
 8000296:	183b      	adds	r3, r7, r0
 8000298:	185b      	adds	r3, r3, r1
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
			EraseInitStruct.PageAddress = start_Adress;
 800029e:	183b      	adds	r3, r7, r0
 80002a0:	185b      	adds	r3, r3, r1
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	605a      	str	r2, [r3, #4]
			EraseInitStruct.NbPages = (End_Adress - start_Adress) / FLASH_PAGE_SIZE;
 80002a6:	69ba      	ldr	r2, [r7, #24]
 80002a8:	69fb      	ldr	r3, [r7, #28]
 80002aa:	1ad3      	subs	r3, r2, r3
 80002ac:	0a9a      	lsrs	r2, r3, #10
 80002ae:	183b      	adds	r3, r7, r0
 80002b0:	185b      	adds	r3, r3, r1
 80002b2:	609a      	str	r2, [r3, #8]
			uint32_t PAGEError = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 80002b8:	2308      	movs	r3, #8
 80002ba:	183a      	adds	r2, r7, r0
 80002bc:	18d2      	adds	r2, r2, r3
 80002be:	183b      	adds	r3, r7, r0
 80002c0:	185b      	adds	r3, r3, r1
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fd35 	bl	8001d34 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress, PP1_time);
 80002ca:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <Writte_flash+0xb4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	613b      	str	r3, [r7, #16]
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]
 80002d4:	69f9      	ldr	r1, [r7, #28]
 80002d6:	693a      	ldr	r2, [r7, #16]
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	2002      	movs	r0, #2
 80002dc:	f001 fbd4 	bl	8001a88 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 4, UDF_time);
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	1d19      	adds	r1, r3, #4
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <Writte_flash+0xb8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	2002      	movs	r0, #2
 80002f4:	f001 fbc8 	bl	8001a88 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 8, PP2_time);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	3308      	adds	r3, #8
 80002fc:	0019      	movs	r1, r3
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <Writte_flash+0xbc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2002      	movs	r0, #2
 800030e:	f001 fbbb 	bl	8001a88 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 12, RO_time);
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	330c      	adds	r3, #12
 8000316:	0019      	movs	r1, r3
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <Writte_flash+0xc0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	001c      	movs	r4, r3
 800031e:	2300      	movs	r3, #0
 8000320:	001d      	movs	r5, r3
 8000322:	0022      	movs	r2, r4
 8000324:	002b      	movs	r3, r5
 8000326:	2002      	movs	r0, #2
 8000328:	f001 fbae 	bl	8001a88 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 800032c:	f001 fc68 	bl	8001c00 <HAL_FLASH_Lock>
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b00c      	add	sp, #48	; 0x30
 8000336:	bdb0      	pop	{r4, r5, r7, pc}
 8000338:	200000bc 	.word	0x200000bc
 800033c:	20000074 	.word	0x20000074
 8000340:	200000b8 	.word	0x200000b8
 8000344:	20000070 	.word	0x20000070

08000348 <read_Flash>:
uint32_t read_Flash(uint32_t addr){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	uint32_t Flash_data;
	Flash_data = *(uint32_t*) addr;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	60fb      	str	r3, [r7, #12]
	return Flash_data;
 8000356:	68fb      	ldr	r3, [r7, #12]
}
 8000358:	0018      	movs	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	b004      	add	sp, #16
 800035e:	bd80      	pop	{r7, pc}

08000360 <write_data_fillter>:
void write_data_fillter(){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if(Writte_data_fillter_flag){
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <write_data_fillter+0x34>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d010      	beq.n	800038e <write_data_fillter+0x2e>
		if((!HAL_GPIO_ReadPin(Pump_Status_Port, Pump_Status_Pin))){
 800036c:	2390      	movs	r3, #144	; 0x90
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	2102      	movs	r1, #2
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fefa 	bl	800216c <HAL_GPIO_ReadPin>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d108      	bne.n	800038e <write_data_fillter+0x2e>
			Writte_flash(0x08007000,0x08007C00);
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <write_data_fillter+0x38>)
 800037e:	4b07      	ldr	r3, [pc, #28]	; (800039c <write_data_fillter+0x3c>)
 8000380:	0011      	movs	r1, r2
 8000382:	0018      	movs	r0, r3
 8000384:	f7ff ff7e 	bl	8000284 <Writte_flash>
			Writte_data_fillter_flag = 0;
 8000388:	4b02      	ldr	r3, [pc, #8]	; (8000394 <write_data_fillter+0x34>)
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000121 	.word	0x20000121
 8000398:	08007c00 	.word	0x08007c00
 800039c:	08007000 	.word	0x08007000

080003a0 <tank_full_led>:
void tank_full_led(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	if(Led_tank_full_on_flag){
 80003a4:	4b39      	ldr	r3, [pc, #228]	; (800048c <tank_full_led+0xec>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d04b      	beq.n	8000444 <tank_full_led+0xa4>
		if(!PP_out_timer_flag){
 80003ac:	4b38      	ldr	r3, [pc, #224]	; (8000490 <tank_full_led+0xf0>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d107      	bne.n	80003c4 <tank_full_led+0x24>
			HAL_GPIO_WritePin(Led_PP_Run_Port, Led_PP_Run_Pin, 0);
 80003b4:	2390      	movs	r3, #144	; 0x90
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	2200      	movs	r2, #0
 80003ba:	2110      	movs	r1, #16
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 fef2 	bl	80021a6 <HAL_GPIO_WritePin>
 80003c2:	e006      	b.n	80003d2 <tank_full_led+0x32>
		}else{
			HAL_GPIO_WritePin(Led_PP_Run_Port, Led_PP_Run_Pin, 1);
 80003c4:	2390      	movs	r3, #144	; 0x90
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	2201      	movs	r2, #1
 80003ca:	2110      	movs	r1, #16
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 feea 	bl	80021a6 <HAL_GPIO_WritePin>
		}
		if (!UDF_out_timer_flag) {
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <tank_full_led+0xf4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d107      	bne.n	80003ea <tank_full_led+0x4a>
			HAL_GPIO_WritePin(Led_UDF_Run_Port, Led_UDF_Run_Pin, 0);
 80003da:	2390      	movs	r3, #144	; 0x90
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	2200      	movs	r2, #0
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	0018      	movs	r0, r3
 80003e4:	f001 fedf 	bl	80021a6 <HAL_GPIO_WritePin>
 80003e8:	e006      	b.n	80003f8 <tank_full_led+0x58>
		}else {
			HAL_GPIO_WritePin(Led_UDF_Run_Port, Led_UDF_Run_Pin, 1);
 80003ea:	2390      	movs	r3, #144	; 0x90
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	2201      	movs	r2, #1
 80003f0:	2140      	movs	r1, #64	; 0x40
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 fed7 	bl	80021a6 <HAL_GPIO_WritePin>
			}
		if (!PP2_out_timer_flag) {
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <tank_full_led+0xf8>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d106      	bne.n	800040e <tank_full_led+0x6e>
			HAL_GPIO_WritePin(Led_PP2_Run_Port, Led_PP2_Run_Pin, 0);
 8000400:	4b26      	ldr	r3, [pc, #152]	; (800049c <tank_full_led+0xfc>)
 8000402:	2200      	movs	r2, #0
 8000404:	2102      	movs	r1, #2
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fecd 	bl	80021a6 <HAL_GPIO_WritePin>
 800040c:	e005      	b.n	800041a <tank_full_led+0x7a>
		}else {
			HAL_GPIO_WritePin(Led_PP2_Run_Port, Led_PP2_Run_Pin, 1);
 800040e:	4b23      	ldr	r3, [pc, #140]	; (800049c <tank_full_led+0xfc>)
 8000410:	2201      	movs	r2, #1
 8000412:	2102      	movs	r1, #2
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fec6 	bl	80021a6 <HAL_GPIO_WritePin>
			}
		if (!Ro_out_timer_flag) {
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <tank_full_led+0x100>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d108      	bne.n	8000434 <tank_full_led+0x94>
			HAL_GPIO_WritePin(Led_Ro_Run_Port, Led_Ro_Run_Pin, 0);
 8000422:	2380      	movs	r3, #128	; 0x80
 8000424:	00d9      	lsls	r1, r3, #3
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2200      	movs	r2, #0
 800042c:	0018      	movs	r0, r3
 800042e:	f001 feba 	bl	80021a6 <HAL_GPIO_WritePin>
 8000432:	e007      	b.n	8000444 <tank_full_led+0xa4>
		}else {
			HAL_GPIO_WritePin(Led_Ro_Run_Port, Led_Ro_Run_Pin, 1);
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	00d9      	lsls	r1, r3, #3
 8000438:	2390      	movs	r3, #144	; 0x90
 800043a:	05db      	lsls	r3, r3, #23
 800043c:	2201      	movs	r2, #1
 800043e:	0018      	movs	r0, r3
 8000440:	f001 feb1 	bl	80021a6 <HAL_GPIO_WritePin>
			}
	}
	if(Led_tank_full_off_flag){
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <tank_full_led+0x104>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d01b      	beq.n	8000484 <tank_full_led+0xe4>
		HAL_GPIO_WritePin(Led_PP_Run_Port, Led_PP_Run_Pin, 1);
 800044c:	2390      	movs	r3, #144	; 0x90
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2201      	movs	r2, #1
 8000452:	2110      	movs	r1, #16
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fea6 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_UDF_Run_Port, Led_UDF_Run_Pin, 1);
 800045a:	2390      	movs	r3, #144	; 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fe9f 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP2_Run_Port, Led_PP2_Run_Pin, 1);
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <tank_full_led+0xfc>)
 800046a:	2201      	movs	r2, #1
 800046c:	2102      	movs	r1, #2
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fe99 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Ro_Run_Port, Led_Ro_Run_Pin, 1);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	00d9      	lsls	r1, r3, #3
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2201      	movs	r2, #1
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fe91 	bl	80021a6 <HAL_GPIO_WritePin>
	}

}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	2000010f 	.word	0x2000010f
 8000490:	2000010c 	.word	0x2000010c
 8000494:	20000119 	.word	0x20000119
 8000498:	2000010e 	.word	0x2000010e
 800049c:	48000400 	.word	0x48000400
 80004a0:	2000011f 	.word	0x2000011f
 80004a4:	20000105 	.word	0x20000105

080004a8 <CLR_data>:
void CLR_data(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	if (CLR_Button_flag&&CLR_PP1_flag) {
 80004ac:	4b43      	ldr	r3, [pc, #268]	; (80005bc <CLR_data+0x114>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d01c      	beq.n	80004ee <CLR_data+0x46>
 80004b4:	4b42      	ldr	r3, [pc, #264]	; (80005c0 <CLR_data+0x118>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d018      	beq.n	80004ee <CLR_data+0x46>
		// clear value
			HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 80004bc:	2390      	movs	r3, #144	; 0x90
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2201      	movs	r2, #1
 80004c2:	2108      	movs	r1, #8
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fe6e 	bl	80021a6 <HAL_GPIO_WritePin>
			CLR_PP1_flag=0;
 80004ca:	4b3d      	ldr	r3, [pc, #244]	; (80005c0 <CLR_data+0x118>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
			CLR_Button_flag=0;
 80004d0:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <CLR_data+0x114>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
			PP_out_timer_flag=0;
 80004d6:	4b3b      	ldr	r3, [pc, #236]	; (80005c4 <CLR_data+0x11c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
			PP1_time = 0 ;
 80004dc:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <CLR_data+0x120>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
			Writte_flash(0x08007000,0x08007C00);
 80004e2:	4a3a      	ldr	r2, [pc, #232]	; (80005cc <CLR_data+0x124>)
 80004e4:	4b3a      	ldr	r3, [pc, #232]	; (80005d0 <CLR_data+0x128>)
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff fecb 	bl	8000284 <Writte_flash>
		}

	if (CLR_Button_flag&&CLR_UDF_flag){
 80004ee:	4b33      	ldr	r3, [pc, #204]	; (80005bc <CLR_data+0x114>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d01c      	beq.n	8000530 <CLR_data+0x88>
 80004f6:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <CLR_data+0x12c>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d018      	beq.n	8000530 <CLR_data+0x88>
			HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 1);
 80004fe:	2390      	movs	r3, #144	; 0x90
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2201      	movs	r2, #1
 8000504:	2120      	movs	r1, #32
 8000506:	0018      	movs	r0, r3
 8000508:	f001 fe4d 	bl	80021a6 <HAL_GPIO_WritePin>
			CLR_UDF_flag = 0;
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <CLR_data+0x12c>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
			CLR_Button_flag=0;
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <CLR_data+0x114>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
			UDF_out_timer_flag=0;
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <CLR_data+0x130>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
			UDF_time = 0;
 800051e:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <CLR_data+0x134>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
			Writte_flash(0x08007000,0x08007C00);
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <CLR_data+0x124>)
 8000526:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <CLR_data+0x128>)
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff feaa 	bl	8000284 <Writte_flash>
		}
	if (CLR_Button_flag&&CLR_PP2_flag){
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <CLR_data+0x114>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d01c      	beq.n	8000572 <CLR_data+0xca>
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <CLR_data+0x138>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d018      	beq.n	8000572 <CLR_data+0xca>
			HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 8000540:	2390      	movs	r3, #144	; 0x90
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2201      	movs	r2, #1
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0018      	movs	r0, r3
 800054a:	f001 fe2c 	bl	80021a6 <HAL_GPIO_WritePin>
			CLR_PP2_flag=0;
 800054e:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <CLR_data+0x138>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
			CLR_Button_flag=0;
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <CLR_data+0x114>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
			PP2_out_timer_flag=0;
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <CLR_data+0x13c>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			PP2_time = 0;
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <CLR_data+0x140>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
			Writte_flash(0x08007000,0x08007C00);
 8000566:	4a19      	ldr	r2, [pc, #100]	; (80005cc <CLR_data+0x124>)
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <CLR_data+0x128>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff fe89 	bl	8000284 <Writte_flash>
		}
	if (CLR_Button_flag&&CLR_Ro_flag){
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <CLR_data+0x114>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d01d      	beq.n	80005b6 <CLR_data+0x10e>
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <CLR_data+0x144>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d019      	beq.n	80005b6 <CLR_data+0x10e>
			HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	0099      	lsls	r1, r3, #2
 8000586:	2390      	movs	r3, #144	; 0x90
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	2201      	movs	r2, #1
 800058c:	0018      	movs	r0, r3
 800058e:	f001 fe0a 	bl	80021a6 <HAL_GPIO_WritePin>
			CLR_Ro_flag=0;
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <CLR_data+0x144>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
			CLR_Button_flag=0;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <CLR_data+0x114>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
			Ro_out_timer_flag=0;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <CLR_data+0x148>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
			RO_time =0;
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <CLR_data+0x14c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
			Writte_flash(0x08007000,0x08007C00);
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <CLR_data+0x124>)
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <CLR_data+0x128>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff fe67 	bl	8000284 <Writte_flash>
		}

}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000115 	.word	0x20000115
 80005c0:	20000108 	.word	0x20000108
 80005c4:	2000010c 	.word	0x2000010c
 80005c8:	200000bc 	.word	0x200000bc
 80005cc:	08007c00 	.word	0x08007c00
 80005d0:	08007000 	.word	0x08007000
 80005d4:	2000010a 	.word	0x2000010a
 80005d8:	20000119 	.word	0x20000119
 80005dc:	20000074 	.word	0x20000074
 80005e0:	2000011b 	.word	0x2000011b
 80005e4:	2000010e 	.word	0x2000010e
 80005e8:	200000b8 	.word	0x200000b8
 80005ec:	20000122 	.word	0x20000122
 80005f0:	2000011f 	.word	0x2000011f
 80005f4:	20000070 	.word	0x20000070

080005f8 <Dislay_erro>:


void Dislay_erro(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if(Input_Water_flag){
 80005fc:	4bcf      	ldr	r3, [pc, #828]	; (800093c <Dislay_erro+0x344>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d044      	beq.n	800068e <Dislay_erro+0x96>
		if(led_water_input_on_flag){
 8000604:	4bce      	ldr	r3, [pc, #824]	; (8000940 <Dislay_erro+0x348>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00d      	beq.n	8000628 <Dislay_erro+0x30>
			HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 0);
 800060c:	2390      	movs	r3, #144	; 0x90
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	2200      	movs	r2, #0
 8000612:	2108      	movs	r1, #8
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fdc6 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2201      	movs	r2, #1
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fdbf 	bl	80021a6 <HAL_GPIO_WritePin>
		}
		if(led_water_input_off_flag){
 8000628:	4bc6      	ldr	r3, [pc, #792]	; (8000944 <Dislay_erro+0x34c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00d      	beq.n	800064c <Dislay_erro+0x54>
			HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 8000630:	2390      	movs	r3, #144	; 0x90
 8000632:	05db      	lsls	r3, r3, #23
 8000634:	2201      	movs	r2, #1
 8000636:	2108      	movs	r1, #8
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fdb4 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 0);
 800063e:	2390      	movs	r3, #144	; 0x90
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2200      	movs	r2, #0
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fdad 	bl	80021a6 <HAL_GPIO_WritePin>
		}
		if(time_on_Input_Water_flag){
 800064c:	4bbe      	ldr	r3, [pc, #760]	; (8000948 <Dislay_erro+0x350>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d01c      	beq.n	800068e <Dislay_erro+0x96>
			Input_Water_flag = led_water_input_off_flag = led_water_input_on_flag = time_on_Input_Water_flag = 0;
 8000654:	4bbc      	ldr	r3, [pc, #752]	; (8000948 <Dislay_erro+0x350>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	4bbb      	ldr	r3, [pc, #748]	; (8000948 <Dislay_erro+0x350>)
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	4bb8      	ldr	r3, [pc, #736]	; (8000940 <Dislay_erro+0x348>)
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	4bb7      	ldr	r3, [pc, #732]	; (8000940 <Dislay_erro+0x348>)
 8000664:	781a      	ldrb	r2, [r3, #0]
 8000666:	4bb7      	ldr	r3, [pc, #732]	; (8000944 <Dislay_erro+0x34c>)
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	4bb6      	ldr	r3, [pc, #728]	; (8000944 <Dislay_erro+0x34c>)
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	4bb3      	ldr	r3, [pc, #716]	; (800093c <Dislay_erro+0x344>)
 8000670:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 8000672:	2390      	movs	r3, #144	; 0x90
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2201      	movs	r2, #1
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fd93 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 8000680:	2390      	movs	r3, #144	; 0x90
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	2201      	movs	r2, #1
 8000686:	2108      	movs	r1, #8
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fd8c 	bl	80021a6 <HAL_GPIO_WritePin>
		}
	}


	if (machine_out_flag&&(!Input_Water_flag)&&!(CLR_Ro_flag||CLR_PP2_flag||CLR_UDF_flag||CLR_PP1_flag)){
 800068e:	4baf      	ldr	r3, [pc, #700]	; (800094c <Dislay_erro+0x354>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d05b      	beq.n	800074e <Dislay_erro+0x156>
 8000696:	4ba9      	ldr	r3, [pc, #676]	; (800093c <Dislay_erro+0x344>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d157      	bne.n	800074e <Dislay_erro+0x156>
 800069e:	4bac      	ldr	r3, [pc, #688]	; (8000950 <Dislay_erro+0x358>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d153      	bne.n	800074e <Dislay_erro+0x156>
 80006a6:	4bab      	ldr	r3, [pc, #684]	; (8000954 <Dislay_erro+0x35c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d14f      	bne.n	800074e <Dislay_erro+0x156>
 80006ae:	4baa      	ldr	r3, [pc, #680]	; (8000958 <Dislay_erro+0x360>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d14b      	bne.n	800074e <Dislay_erro+0x156>
 80006b6:	4ba9      	ldr	r3, [pc, #676]	; (800095c <Dislay_erro+0x364>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d147      	bne.n	800074e <Dislay_erro+0x156>
		if (machine_out_timer1_flag){
 80006be:	4ba8      	ldr	r3, [pc, #672]	; (8000960 <Dislay_erro+0x368>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00e      	beq.n	80006e4 <Dislay_erro+0xec>
			HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 0);
 80006c6:	2390      	movs	r3, #144	; 0x90
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fd69 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	0099      	lsls	r1, r3, #2
 80006d8:	2390      	movs	r3, #144	; 0x90
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	2201      	movs	r2, #1
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 fd61 	bl	80021a6 <HAL_GPIO_WritePin>
		}
		if (machine_out_timer2_flag){
 80006e4:	4b9f      	ldr	r3, [pc, #636]	; (8000964 <Dislay_erro+0x36c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00e      	beq.n	800070a <Dislay_erro+0x112>
			HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 80006ec:	2390      	movs	r3, #144	; 0x90
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	2201      	movs	r2, #1
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fd56 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 0);
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	0099      	lsls	r1, r3, #2
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	2200      	movs	r2, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fd4e 	bl	80021a6 <HAL_GPIO_WritePin>
		}
		if (time_on_Machine_out_flag){
 800070a:	4b97      	ldr	r3, [pc, #604]	; (8000968 <Dislay_erro+0x370>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d01d      	beq.n	800074e <Dislay_erro+0x156>
			machine_out_flag = machine_out_timer1_flag = machine_out_timer2_flag = time_on_Machine_out_flag =0;
 8000712:	4b95      	ldr	r3, [pc, #596]	; (8000968 <Dislay_erro+0x370>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	4b93      	ldr	r3, [pc, #588]	; (8000968 <Dislay_erro+0x370>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b91      	ldr	r3, [pc, #580]	; (8000964 <Dislay_erro+0x36c>)
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	4b90      	ldr	r3, [pc, #576]	; (8000964 <Dislay_erro+0x36c>)
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	4b8e      	ldr	r3, [pc, #568]	; (8000960 <Dislay_erro+0x368>)
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	4b8d      	ldr	r3, [pc, #564]	; (8000960 <Dislay_erro+0x368>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b87      	ldr	r3, [pc, #540]	; (800094c <Dislay_erro+0x354>)
 800072e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 8000730:	2390      	movs	r3, #144	; 0x90
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	2201      	movs	r2, #1
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fd34 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	0099      	lsls	r1, r3, #2
 8000742:	2390      	movs	r3, #144	; 0x90
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2201      	movs	r2, #1
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fd2c 	bl	80021a6 <HAL_GPIO_WritePin>
		}
	}

	if (PP_out_timer_flag&&(!Input_Water_flag)&&(!machine_out_flag)&&(!(CLR_Ro_flag||CLR_PP2_flag||CLR_UDF_flag||CLR_PP1_flag))) {
 800074e:	4b87      	ldr	r3, [pc, #540]	; (800096c <Dislay_erro+0x374>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d035      	beq.n	80007c2 <Dislay_erro+0x1ca>
 8000756:	4b79      	ldr	r3, [pc, #484]	; (800093c <Dislay_erro+0x344>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d131      	bne.n	80007c2 <Dislay_erro+0x1ca>
 800075e:	4b7b      	ldr	r3, [pc, #492]	; (800094c <Dislay_erro+0x354>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d12d      	bne.n	80007c2 <Dislay_erro+0x1ca>
 8000766:	4b7a      	ldr	r3, [pc, #488]	; (8000950 <Dislay_erro+0x358>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d129      	bne.n	80007c2 <Dislay_erro+0x1ca>
 800076e:	4b79      	ldr	r3, [pc, #484]	; (8000954 <Dislay_erro+0x35c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d125      	bne.n	80007c2 <Dislay_erro+0x1ca>
 8000776:	4b78      	ldr	r3, [pc, #480]	; (8000958 <Dislay_erro+0x360>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d121      	bne.n	80007c2 <Dislay_erro+0x1ca>
 800077e:	4b77      	ldr	r3, [pc, #476]	; (800095c <Dislay_erro+0x364>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d11d      	bne.n	80007c2 <Dislay_erro+0x1ca>
		time_on_PP_out_trigger =1;
 8000786:	4b7a      	ldr	r3, [pc, #488]	; (8000970 <Dislay_erro+0x378>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 0);
 800078c:	2390      	movs	r3, #144	; 0x90
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	2200      	movs	r2, #0
 8000792:	2108      	movs	r1, #8
 8000794:	0018      	movs	r0, r3
 8000796:	f001 fd06 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_PP_Run_Port, Led_PP_Run_Pin, 1);
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2201      	movs	r2, #1
 80007a0:	2110      	movs	r1, #16
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fcff 	bl	80021a6 <HAL_GPIO_WritePin>
		if(time_on_PP_flag){
 80007a8:	4b72      	ldr	r3, [pc, #456]	; (8000974 <Dislay_erro+0x37c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d008      	beq.n	80007c2 <Dislay_erro+0x1ca>

			PP_out_timer_flag  = 0;
 80007b0:	4b6e      	ldr	r3, [pc, #440]	; (800096c <Dislay_erro+0x374>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
			time_on_PP_flag =0;
 80007b6:	4b6f      	ldr	r3, [pc, #444]	; (8000974 <Dislay_erro+0x37c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
			time_on_PP_out_trigger =0;
 80007bc:	4b6c      	ldr	r3, [pc, #432]	; (8000970 <Dislay_erro+0x378>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (UDF_out_timer_flag&&(!Input_Water_flag)&(!machine_out_flag)&&(!(CLR_Ro_flag||CLR_PP2_flag||CLR_UDF_flag||CLR_PP1_flag))){
 80007c2:	4b6d      	ldr	r3, [pc, #436]	; (8000978 <Dislay_erro+0x380>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d035      	beq.n	8000836 <Dislay_erro+0x23e>
 80007ca:	4b5c      	ldr	r3, [pc, #368]	; (800093c <Dislay_erro+0x344>)
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	4b5f      	ldr	r3, [pc, #380]	; (800094c <Dislay_erro+0x354>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d12d      	bne.n	8000836 <Dislay_erro+0x23e>
 80007da:	4b5d      	ldr	r3, [pc, #372]	; (8000950 <Dislay_erro+0x358>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d129      	bne.n	8000836 <Dislay_erro+0x23e>
 80007e2:	4b5c      	ldr	r3, [pc, #368]	; (8000954 <Dislay_erro+0x35c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d125      	bne.n	8000836 <Dislay_erro+0x23e>
 80007ea:	4b5b      	ldr	r3, [pc, #364]	; (8000958 <Dislay_erro+0x360>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d121      	bne.n	8000836 <Dislay_erro+0x23e>
 80007f2:	4b5a      	ldr	r3, [pc, #360]	; (800095c <Dislay_erro+0x364>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d11d      	bne.n	8000836 <Dislay_erro+0x23e>
		time_on_UDF_out_trigger = 1;
 80007fa:	4b60      	ldr	r3, [pc, #384]	; (800097c <Dislay_erro+0x384>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 0);
 8000800:	2390      	movs	r3, #144	; 0x90
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	2200      	movs	r2, #0
 8000806:	2120      	movs	r1, #32
 8000808:	0018      	movs	r0, r3
 800080a:	f001 fccc 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_UDF_Run_Port, Led_UDF_Run_Pin, 1);
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2201      	movs	r2, #1
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	0018      	movs	r0, r3
 8000818:	f001 fcc5 	bl	80021a6 <HAL_GPIO_WritePin>
		if(time_on_UDF_flag){
 800081c:	4b58      	ldr	r3, [pc, #352]	; (8000980 <Dislay_erro+0x388>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <Dislay_erro+0x23e>

			UDF_out_timer_flag  = 0;
 8000824:	4b54      	ldr	r3, [pc, #336]	; (8000978 <Dislay_erro+0x380>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
			time_on_UDF_flag = 0;
 800082a:	4b55      	ldr	r3, [pc, #340]	; (8000980 <Dislay_erro+0x388>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
			time_on_UDF_out_trigger = 0;
 8000830:	4b52      	ldr	r3, [pc, #328]	; (800097c <Dislay_erro+0x384>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]

		}
	}

	if (PP2_out_timer_flag&&(!Input_Water_flag)&&(!machine_out_flag)&&(!(CLR_Ro_flag||CLR_PP2_flag||CLR_UDF_flag||CLR_PP1_flag))) {
 8000836:	4b53      	ldr	r3, [pc, #332]	; (8000984 <Dislay_erro+0x38c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d034      	beq.n	80008a8 <Dislay_erro+0x2b0>
 800083e:	4b3f      	ldr	r3, [pc, #252]	; (800093c <Dislay_erro+0x344>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d130      	bne.n	80008a8 <Dislay_erro+0x2b0>
 8000846:	4b41      	ldr	r3, [pc, #260]	; (800094c <Dislay_erro+0x354>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d12c      	bne.n	80008a8 <Dislay_erro+0x2b0>
 800084e:	4b40      	ldr	r3, [pc, #256]	; (8000950 <Dislay_erro+0x358>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d128      	bne.n	80008a8 <Dislay_erro+0x2b0>
 8000856:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <Dislay_erro+0x35c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d124      	bne.n	80008a8 <Dislay_erro+0x2b0>
 800085e:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <Dislay_erro+0x360>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d120      	bne.n	80008a8 <Dislay_erro+0x2b0>
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <Dislay_erro+0x364>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d11c      	bne.n	80008a8 <Dislay_erro+0x2b0>
		time_on_PP2_out_trigger =1;
 800086e:	4b46      	ldr	r3, [pc, #280]	; (8000988 <Dislay_erro+0x390>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 0);
 8000874:	2390      	movs	r3, #144	; 0x90
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	2200      	movs	r2, #0
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fc92 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_PP2_Run_Port, Led_PP2_Run_Pin, 1);
 8000882:	4b42      	ldr	r3, [pc, #264]	; (800098c <Dislay_erro+0x394>)
 8000884:	2201      	movs	r2, #1
 8000886:	2102      	movs	r1, #2
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fc8c 	bl	80021a6 <HAL_GPIO_WritePin>
		if(time_on_PP2_flag){
 800088e:	4b40      	ldr	r3, [pc, #256]	; (8000990 <Dislay_erro+0x398>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d008      	beq.n	80008a8 <Dislay_erro+0x2b0>

			 PP2_out_timer_flag = 0;
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <Dislay_erro+0x38c>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
			 time_on_PP2_flag = 0;
 800089c:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <Dislay_erro+0x398>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
			 time_on_PP2_out_trigger =0;
 80008a2:	4b39      	ldr	r3, [pc, #228]	; (8000988 <Dislay_erro+0x390>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

		}
	}

	if (Ro_out_timer_flag&&(!Input_Water_flag)&&(!machine_out_flag)&&(!(CLR_Ro_flag||CLR_PP2_flag||CLR_UDF_flag||CLR_PP1_flag))) {
 80008a8:	4b3a      	ldr	r3, [pc, #232]	; (8000994 <Dislay_erro+0x39c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d037      	beq.n	8000920 <Dislay_erro+0x328>
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <Dislay_erro+0x344>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d133      	bne.n	8000920 <Dislay_erro+0x328>
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <Dislay_erro+0x354>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d12f      	bne.n	8000920 <Dislay_erro+0x328>
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <Dislay_erro+0x358>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12b      	bne.n	8000920 <Dislay_erro+0x328>
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <Dislay_erro+0x35c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d127      	bne.n	8000920 <Dislay_erro+0x328>
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <Dislay_erro+0x360>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d123      	bne.n	8000920 <Dislay_erro+0x328>
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <Dislay_erro+0x364>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11f      	bne.n	8000920 <Dislay_erro+0x328>
			time_on_Ro_out_trigger =1;
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <Dislay_erro+0x3a0>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 0);
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	0099      	lsls	r1, r3, #2
 80008ea:	2390      	movs	r3, #144	; 0x90
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2200      	movs	r2, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f001 fc58 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Ro_Run_Port, Led_Ro_Run_Pin, 1);
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	00d9      	lsls	r1, r3, #3
 80008fa:	2390      	movs	r3, #144	; 0x90
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2201      	movs	r2, #1
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fc50 	bl	80021a6 <HAL_GPIO_WritePin>
		if(time_on_Ro_flag){
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <Dislay_erro+0x3a4>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d008      	beq.n	8000920 <Dislay_erro+0x328>

			Ro_out_timer_flag = 0;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <Dislay_erro+0x39c>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
			time_on_Ro_flag = 0;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <Dislay_erro+0x3a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
			time_on_Ro_out_trigger =0;
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <Dislay_erro+0x3a0>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]

		}
	}
	if (!(Ro_out_timer_flag &PP2_out_timer_flag && UDF_out_timer_flag && PP_out_timer_flag&& machine_out_flag&& Input_Water_flag)&&(!(CLR_Ro_flag||CLR_PP2_flag||CLR_UDF_flag||CLR_PP1_flag))) {
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <Dislay_erro+0x39c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <Dislay_erro+0x38c>)
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	4013      	ands	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d043      	beq.n	80009b8 <Dislay_erro+0x3c0>
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <Dislay_erro+0x380>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d03f      	beq.n	80009b8 <Dislay_erro+0x3c0>
 8000938:	e032      	b.n	80009a0 <Dislay_erro+0x3a8>
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	20000110 	.word	0x20000110
 8000940:	2000011d 	.word	0x2000011d
 8000944:	20000106 	.word	0x20000106
 8000948:	20000127 	.word	0x20000127
 800094c:	20000123 	.word	0x20000123
 8000950:	20000122 	.word	0x20000122
 8000954:	2000011b 	.word	0x2000011b
 8000958:	2000010a 	.word	0x2000010a
 800095c:	20000108 	.word	0x20000108
 8000960:	20000111 	.word	0x20000111
 8000964:	20000109 	.word	0x20000109
 8000968:	20000117 	.word	0x20000117
 800096c:	2000010c 	.word	0x2000010c
 8000970:	20000125 	.word	0x20000125
 8000974:	20000116 	.word	0x20000116
 8000978:	20000119 	.word	0x20000119
 800097c:	20000112 	.word	0x20000112
 8000980:	20000113 	.word	0x20000113
 8000984:	2000010e 	.word	0x2000010e
 8000988:	20000114 	.word	0x20000114
 800098c:	48000400 	.word	0x48000400
 8000990:	20000118 	.word	0x20000118
 8000994:	2000011f 	.word	0x2000011f
 8000998:	20000107 	.word	0x20000107
 800099c:	2000011c 	.word	0x2000011c
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <Dislay_erro+0x43c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d007      	beq.n	80009b8 <Dislay_erro+0x3c0>
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <Dislay_erro+0x440>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <Dislay_erro+0x3c0>
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <Dislay_erro+0x444>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d139      	bne.n	8000a2c <Dislay_erro+0x434>
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <Dislay_erro+0x448>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d135      	bne.n	8000a2c <Dislay_erro+0x434>
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <Dislay_erro+0x44c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d131      	bne.n	8000a2c <Dislay_erro+0x434>
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <Dislay_erro+0x450>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d12d      	bne.n	8000a2c <Dislay_erro+0x434>
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <Dislay_erro+0x454>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d129      	bne.n	8000a2c <Dislay_erro+0x434>
		HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	0099      	lsls	r1, r3, #2
 80009dc:	2390      	movs	r3, #144	; 0x90
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	2201      	movs	r2, #1
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fbdf 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 80009e8:	2390      	movs	r3, #144	; 0x90
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	2201      	movs	r2, #1
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 fbd8 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 1);
 80009f6:	2390      	movs	r3, #144	; 0x90
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	2201      	movs	r2, #1
 80009fc:	2120      	movs	r1, #32
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fbd1 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 8000a04:	2390      	movs	r3, #144	; 0x90
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 fbca 	bl	80021a6 <HAL_GPIO_WritePin>
		dislay_erro_lock_trigger =1 ;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <Dislay_erro+0x458>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
		if (dislay_erro_lock_flag){
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <Dislay_erro+0x45c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d005      	beq.n	8000a2c <Dislay_erro+0x434>
			dislay_erro_lock_trigger =0;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <Dislay_erro+0x458>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
			dislay_erro_lock_flag= 0;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <Dislay_erro+0x45c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	2000010c 	.word	0x2000010c
 8000a38:	20000123 	.word	0x20000123
 8000a3c:	20000110 	.word	0x20000110
 8000a40:	20000122 	.word	0x20000122
 8000a44:	2000011b 	.word	0x2000011b
 8000a48:	2000010a 	.word	0x2000010a
 8000a4c:	20000108 	.word	0x20000108
 8000a50:	20000126 	.word	0x20000126
 8000a54:	20000128 	.word	0x20000128

08000a58 <fillter_check>:

void fillter_check (){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	if (((!(HAL_GPIO_ReadPin(Input_water_Status_Port, Input_water_Pin))&(!lock_led_erro)))){
 8000a5c:	2390      	movs	r3, #144	; 0x90
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	2104      	movs	r1, #4
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fb82 	bl	800216c <HAL_GPIO_ReadPin>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <fillter_check+0x150>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <fillter_check+0x26>
		Input_Water_flag = 1;
 8000a78:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <fillter_check+0x154>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
	}


	if ((Machine_time >= Machine_check_time)&(!lock_led_erro)){
 8000a7e:	4b4c      	ldr	r3, [pc, #304]	; (8000bb0 <fillter_check+0x158>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	222c      	movs	r2, #44	; 0x2c
 8000a84:	32ff      	adds	r2, #255	; 0xff
 8000a86:	429a      	cmp	r2, r3
 8000a88:	419b      	sbcs	r3, r3
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4a46      	ldr	r2, [pc, #280]	; (8000ba8 <fillter_check+0x150>)
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	4251      	negs	r1, r2
 8000a94:	414a      	adcs	r2, r1
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	4013      	ands	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d010      	beq.n	8000ac2 <fillter_check+0x6a>
			machine_out_flag = 1;
 8000aa0:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <fillter_check+0x15c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
			if((!HAL_GPIO_ReadPin(Pump_Status_Port, Pump_Status_Pin))){
 8000aa6:	2390      	movs	r3, #144	; 0x90
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	2102      	movs	r1, #2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 fb5d 	bl	800216c <HAL_GPIO_ReadPin>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d105      	bne.n	8000ac2 <fillter_check+0x6a>
				Machine_time = 0;
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <fillter_check+0x158>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
				machine_out_flag = 0;
 8000abc:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <fillter_check+0x15c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
			}
		}

	if ((PP1_time >= PP_Check_Time)&(!lock_led_erro)) {
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <fillter_check+0x160>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a3d      	ldr	r2, [pc, #244]	; (8000bbc <fillter_check+0x164>)
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	419b      	sbcs	r3, r3
 8000acc:	425b      	negs	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4a35      	ldr	r2, [pc, #212]	; (8000ba8 <fillter_check+0x150>)
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	4251      	negs	r1, r2
 8000ad6:	414a      	adcs	r2, r1
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	4013      	ands	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <fillter_check+0x90>
		PP_out_timer_flag =1;
 8000ae2:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <fillter_check+0x168>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
	}
	if ((UDF_time >= UDF_Check_Time)&(!lock_led_erro)) {
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <fillter_check+0x16c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <fillter_check+0x170>)
 8000aee:	429a      	cmp	r2, r3
 8000af0:	419b      	sbcs	r3, r3
 8000af2:	425b      	negs	r3, r3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <fillter_check+0x150>)
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	4251      	negs	r1, r2
 8000afc:	414a      	adcs	r2, r1
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	4013      	ands	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <fillter_check+0xb6>
		UDF_out_timer_flag = 1;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <fillter_check+0x174>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
	}
	if ((PP2_time >= PP2_Check_Time) &(!lock_led_erro)){
 8000b0e:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <fillter_check+0x178>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <fillter_check+0x17c>)
 8000b14:	429a      	cmp	r2, r3
 8000b16:	419b      	sbcs	r3, r3
 8000b18:	425b      	negs	r3, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <fillter_check+0x150>)
 8000b1e:	7812      	ldrb	r2, [r2, #0]
 8000b20:	4251      	negs	r1, r2
 8000b22:	414a      	adcs	r2, r1
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	4013      	ands	r3, r2
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <fillter_check+0xdc>
		PP2_out_timer_flag = 1;
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <fillter_check+0x180>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
	}
	if ((RO_time >= RO_Check_Time)&(!lock_led_erro)){
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <fillter_check+0x184>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <fillter_check+0x188>)
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	419b      	sbcs	r3, r3
 8000b3e:	425b      	negs	r3, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <fillter_check+0x150>)
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	4251      	negs	r1, r2
 8000b48:	414a      	adcs	r2, r1
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <fillter_check+0x102>
		Ro_out_timer_flag = 1;
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <fillter_check+0x18c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
	}


	if(Input_Water_flag||machine_out_flag||PP_out_timer_flag||UDF_out_timer_flag||PP2_out_timer_flag||Ro_out_timer_flag||dislay_erro_lock_trigger){
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <fillter_check+0x154>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d117      	bne.n	8000b92 <fillter_check+0x13a>
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <fillter_check+0x15c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d113      	bne.n	8000b92 <fillter_check+0x13a>
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <fillter_check+0x168>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10f      	bne.n	8000b92 <fillter_check+0x13a>
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <fillter_check+0x174>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10b      	bne.n	8000b92 <fillter_check+0x13a>
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <fillter_check+0x180>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d107      	bne.n	8000b92 <fillter_check+0x13a>
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <fillter_check+0x18c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <fillter_check+0x13a>
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <fillter_check+0x190>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <fillter_check+0x142>
		lock_led_erro = 1;
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <fillter_check+0x150>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e002      	b.n	8000ba0 <fillter_check+0x148>
	}else{
		lock_led_erro = 0;
 8000b9a:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <fillter_check+0x150>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]

	}

}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	2000006c 	.word	0x2000006c
 8000bac:	20000110 	.word	0x20000110
 8000bb0:	200000c0 	.word	0x200000c0
 8000bb4:	20000123 	.word	0x20000123
 8000bb8:	200000bc 	.word	0x200000bc
 8000bbc:	00002a2f 	.word	0x00002a2f
 8000bc0:	2000010c 	.word	0x2000010c
 8000bc4:	20000074 	.word	0x20000074
 8000bc8:	0000545f 	.word	0x0000545f
 8000bcc:	20000119 	.word	0x20000119
 8000bd0:	200000b8 	.word	0x200000b8
 8000bd4:	00007e8f 	.word	0x00007e8f
 8000bd8:	2000010e 	.word	0x2000010e
 8000bdc:	20000070 	.word	0x20000070
 8000be0:	0000d2ef 	.word	0x0000d2ef
 8000be4:	2000011f 	.word	0x2000011f
 8000be8:	20000126 	.word	0x20000126

08000bec <led_fan_action>:

void led_fan_action(uint8_t* led_fan_flag){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	if(*led_fan_flag){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d038      	beq.n	8000c6e <led_fan_action+0x82>
	(led_fan_action_cnt++);
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <led_fan_action+0x8c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <led_fan_action+0x8c>)
 8000c06:	701a      	strb	r2, [r3, #0]
	*led_fan_flag =0;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	if(led_fan_action_cnt == 1){
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <led_fan_action+0x8c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d105      	bne.n	8000c22 <led_fan_action+0x36>
		HAL_GPIO_TogglePin(Led_PP_Run_Port, Led_PP_Run_Pin);
 8000c16:	2390      	movs	r3, #144	; 0x90
 8000c18:	05db      	lsls	r3, r3, #23
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f001 fadf 	bl	80021e0 <HAL_GPIO_TogglePin>
	}
	if(led_fan_action_cnt == 2){
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <led_fan_action+0x8c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d105      	bne.n	8000c36 <led_fan_action+0x4a>
			HAL_GPIO_TogglePin(Led_UDF_Run_Port, Led_UDF_Run_Pin);
 8000c2a:	2390      	movs	r3, #144	; 0x90
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fad5 	bl	80021e0 <HAL_GPIO_TogglePin>
		}
	if(led_fan_action_cnt == 3){
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <led_fan_action+0x8c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d104      	bne.n	8000c48 <led_fan_action+0x5c>

				HAL_GPIO_TogglePin(Led_PP2_Run_Port, Led_PP2_Run_Pin);
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <led_fan_action+0x90>)
 8000c40:	2102      	movs	r1, #2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 facc 	bl	80021e0 <HAL_GPIO_TogglePin>
			}
	if(led_fan_action_cnt == 4){
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <led_fan_action+0x8c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d107      	bne.n	8000c60 <led_fan_action+0x74>

		HAL_GPIO_TogglePin(Led_Ro_Run_Port,Led_Ro_Run_Pin);
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	00da      	lsls	r2, r3, #3
 8000c54:	2390      	movs	r3, #144	; 0x90
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fac0 	bl	80021e0 <HAL_GPIO_TogglePin>

	}
	if(led_fan_action_cnt >=5 ){
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <led_fan_action+0x8c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d902      	bls.n	8000c6e <led_fan_action+0x82>
		led_fan_action_cnt =0;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <led_fan_action+0x8c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	20000104 	.word	0x20000104
 8000c7c:	48000400 	.word	0x48000400

08000c80 <led_couter>:

void led_couter(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

	if(CLR_PP1_flag&(!CLR_Button_flag)){
 8000c84:	4b6b      	ldr	r3, [pc, #428]	; (8000e34 <led_couter+0x1b4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b6b      	ldr	r3, [pc, #428]	; (8000e38 <led_couter+0x1b8>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4259      	negs	r1, r3
 8000c90:	414b      	adcs	r3, r1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4013      	ands	r3, r2
 8000c96:	d01c      	beq.n	8000cd2 <led_couter+0x52>
		HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 0);
 8000c98:	2390      	movs	r3, #144	; 0x90
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fa80 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 1);
 8000ca6:	2390      	movs	r3, #144	; 0x90
 8000ca8:	05db      	lsls	r3, r3, #23
 8000caa:	2201      	movs	r2, #1
 8000cac:	2120      	movs	r1, #32
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f001 fa79 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 8000cb4:	2390      	movs	r3, #144	; 0x90
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f001 fa72 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	0099      	lsls	r1, r3, #2
 8000cc6:	2390      	movs	r3, #144	; 0x90
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	2201      	movs	r2, #1
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f001 fa6a 	bl	80021a6 <HAL_GPIO_WritePin>
	}
	if(CLR_UDF_flag&(!CLR_Button_flag)){
 8000cd2:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <led_couter+0x1bc>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	4b57      	ldr	r3, [pc, #348]	; (8000e38 <led_couter+0x1b8>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4259      	negs	r1, r3
 8000cde:	414b      	adcs	r3, r1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d01c      	beq.n	8000d20 <led_couter+0xa0>
		HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 0);
 8000ce6:	2390      	movs	r3, #144	; 0x90
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 fa59 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 8000cf4:	2390      	movs	r3, #144	; 0x90
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 fa52 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 8000d02:	2390      	movs	r3, #144	; 0x90
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	2201      	movs	r2, #1
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f001 fa4b 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	0099      	lsls	r1, r3, #2
 8000d14:	2390      	movs	r3, #144	; 0x90
 8000d16:	05db      	lsls	r3, r3, #23
 8000d18:	2201      	movs	r2, #1
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 fa43 	bl	80021a6 <HAL_GPIO_WritePin>
	}
	if(CLR_PP2_flag&(!CLR_Button_flag)){
 8000d20:	4b47      	ldr	r3, [pc, #284]	; (8000e40 <led_couter+0x1c0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	001a      	movs	r2, r3
 8000d26:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <led_couter+0x1b8>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4259      	negs	r1, r3
 8000d2c:	414b      	adcs	r3, r1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4013      	ands	r3, r2
 8000d32:	d01c      	beq.n	8000d6e <led_couter+0xee>
		HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 0);
 8000d34:	2390      	movs	r3, #144	; 0x90
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f001 fa32 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 8000d42:	2390      	movs	r3, #144	; 0x90
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	2201      	movs	r2, #1
 8000d48:	2108      	movs	r1, #8
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 fa2b 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 1);
 8000d50:	2390      	movs	r3, #144	; 0x90
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	2201      	movs	r2, #1
 8000d56:	2120      	movs	r1, #32
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 fa24 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	0099      	lsls	r1, r3, #2
 8000d62:	2390      	movs	r3, #144	; 0x90
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	2201      	movs	r2, #1
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f001 fa1c 	bl	80021a6 <HAL_GPIO_WritePin>
	}
	if(CLR_Ro_flag&(!CLR_Button_flag)){
 8000d6e:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <led_couter+0x1c4>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	001a      	movs	r2, r3
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <led_couter+0x1b8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4259      	negs	r1, r3
 8000d7a:	414b      	adcs	r3, r1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d01c      	beq.n	8000dbc <led_couter+0x13c>
		HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 0);
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	0099      	lsls	r1, r3, #2
 8000d86:	2390      	movs	r3, #144	; 0x90
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 fa0a 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 1);
 8000d92:	2390      	movs	r3, #144	; 0x90
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	2201      	movs	r2, #1
 8000d98:	2120      	movs	r1, #32
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f001 fa03 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 8000da0:	2390      	movs	r3, #144	; 0x90
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	2201      	movs	r2, #1
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 f9fc 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 8000dae:	2390      	movs	r3, #144	; 0x90
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	2201      	movs	r2, #1
 8000db4:	2108      	movs	r1, #8
 8000db6:	0018      	movs	r0, r3
 8000db8:	f001 f9f5 	bl	80021a6 <HAL_GPIO_WritePin>
	}
	if(Clr_Button_trigger&!(CLR_PP2_flag||CLR_Ro_flag||CLR_UDF_flag||CLR_PP1_flag)){
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <led_couter+0x1c8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <led_couter+0x1c0>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10d      	bne.n	8000de6 <led_couter+0x166>
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <led_couter+0x1c4>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <led_couter+0x166>
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <led_couter+0x1bc>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d105      	bne.n	8000de6 <led_couter+0x166>
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <led_couter+0x1b4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <led_couter+0x166>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <led_couter+0x168>
 8000de6:	2300      	movs	r3, #0
 8000de8:	4013      	ands	r3, r2
 8000dea:	d01f      	beq.n	8000e2c <led_couter+0x1ac>
		HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 1);
 8000dec:	2390      	movs	r3, #144	; 0x90
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	2201      	movs	r2, #1
 8000df2:	2120      	movs	r1, #32
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 f9d6 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 8000dfa:	2390      	movs	r3, #144	; 0x90
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0018      	movs	r0, r3
 8000e04:	f001 f9cf 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 8000e08:	2390      	movs	r3, #144	; 0x90
 8000e0a:	05db      	lsls	r3, r3, #23
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2108      	movs	r1, #8
 8000e10:	0018      	movs	r0, r3
 8000e12:	f001 f9c8 	bl	80021a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	0099      	lsls	r1, r3, #2
 8000e1a:	2390      	movs	r3, #144	; 0x90
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	2201      	movs	r2, #1
 8000e20:	0018      	movs	r0, r3
 8000e22:	f001 f9c0 	bl	80021a6 <HAL_GPIO_WritePin>
		Clr_Button_trigger = 0;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <led_couter+0x1c8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	}
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	20000108 	.word	0x20000108
 8000e38:	20000115 	.word	0x20000115
 8000e3c:	2000010a 	.word	0x2000010a
 8000e40:	2000011b 	.word	0x2000011b
 8000e44:	20000122 	.word	0x20000122
 8000e48:	20000124 	.word	0x20000124

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e50:	f000 fcd8 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e54:	f000 f85c 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e58:	f000 f914 	bl	8001084 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e5c:	f000 f898 	bl	8000f90 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000e60:	f000 f8ea 	bl	8001038 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim3);
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <main+0x90>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 fe76 	bl	8002b58 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim14);
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <main+0x94>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 fe72 	bl	8002b58 <HAL_TIM_Base_Start_IT>
    PP1_time = read_Flash(0x08007000);
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <main+0x98>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff fa66 	bl	8000348 <read_Flash>
 8000e7c:	0002      	movs	r2, r0
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <main+0x9c>)
 8000e80:	601a      	str	r2, [r3, #0]
    UDF_time = read_Flash(0x08007000 + 4);
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <main+0xa0>)
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff fa5f 	bl	8000348 <read_Flash>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <main+0xa4>)
 8000e8e:	601a      	str	r2, [r3, #0]
    PP2_time = read_Flash(0x08007000 + 8);
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <main+0xa8>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff fa58 	bl	8000348 <read_Flash>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <main+0xac>)
 8000e9c:	601a      	str	r2, [r3, #0]
    RO_time = read_Flash(0x08007000 + 12);
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <main+0xb0>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff fa51 	bl	8000348 <read_Flash>
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <main+0xb4>)
 8000eaa:	601a      	str	r2, [r3, #0]
    watch_Dog_Trigger = 1;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <main+0xb8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  increase_time(&Pump_Status_flag);
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <main+0xbc>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff f9b3 	bl	8000220 <increase_time>
	  tank_full_led();
 8000eba:	f7ff fa71 	bl	80003a0 <tank_full_led>
	  led_couter();
 8000ebe:	f7ff fedf 	bl	8000c80 <led_couter>
	  CLR_data();
 8000ec2:	f7ff faf1 	bl	80004a8 <CLR_data>
	  fillter_check();
 8000ec6:	f7ff fdc7 	bl	8000a58 <fillter_check>
	  Dislay_erro();
 8000eca:	f7ff fb95 	bl	80005f8 <Dislay_erro>
	  led_fan_action(&led_fillter_flag);
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <main+0xc0>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff fe8b 	bl	8000bec <led_fan_action>
	  write_data_fillter();
 8000ed6:	f7ff fa43 	bl	8000360 <write_data_fillter>
	  increase_time(&Pump_Status_flag);
 8000eda:	e7ea      	b.n	8000eb2 <main+0x66>
 8000edc:	20000078 	.word	0x20000078
 8000ee0:	200000c4 	.word	0x200000c4
 8000ee4:	08007000 	.word	0x08007000
 8000ee8:	200000bc 	.word	0x200000bc
 8000eec:	08007004 	.word	0x08007004
 8000ef0:	20000074 	.word	0x20000074
 8000ef4:	08007008 	.word	0x08007008
 8000ef8:	200000b8 	.word	0x200000b8
 8000efc:	0800700c 	.word	0x0800700c
 8000f00:	20000070 	.word	0x20000070
 8000f04:	2000011e 	.word	0x2000011e
 8000f08:	20000120 	.word	0x20000120
 8000f0c:	2000010d 	.word	0x2000010d

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b091      	sub	sp, #68	; 0x44
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	2410      	movs	r4, #16
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	2330      	movs	r3, #48	; 0x30
 8000f1e:	001a      	movs	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f002 f9c3 	bl	80032ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f26:	003b      	movs	r3, r7
 8000f28:	0018      	movs	r0, r3
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f002 f9bc 	bl	80032ac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f34:	0021      	movs	r1, r4
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2202      	movs	r2, #2
 8000f3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2210      	movs	r2, #16
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	0018      	movs	r0, r3
 8000f52:	f001 f987 	bl	8002264 <HAL_RCC_OscConfig>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000f5a:	f000 f931 	bl	80011c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	003b      	movs	r3, r7
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f64:	003b      	movs	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f70:	003b      	movs	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f76:	003b      	movs	r3, r7
 8000f78:	2100      	movs	r1, #0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f001 fc8e 	bl	800289c <HAL_RCC_ClockConfig>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f84:	f000 f91c 	bl	80011c0 <Error_Handler>
  }
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b011      	add	sp, #68	; 0x44
 8000f8e:	bd90      	pop	{r4, r7, pc}

08000f90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	2308      	movs	r3, #8
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f002 f983 	bl	80032ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	0018      	movs	r0, r3
 8000faa:	2308      	movs	r3, #8
 8000fac:	001a      	movs	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f002 f97c 	bl	80032ac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <MX_TIM3_Init+0xa4>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fbc:	22c8      	movs	r2, #200	; 0xc8
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fca:	2209      	movs	r2, #9
 8000fcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f001 fd8f 	bl	8002b00 <HAL_TIM_Base_Init>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fe6:	f000 f8eb 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	2108      	movs	r1, #8
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0152      	lsls	r2, r2, #5
 8000ff2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ff4:	187a      	adds	r2, r7, r1
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000ff8:	0011      	movs	r1, r2
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f001 fee4 	bl	8002dc8 <HAL_TIM_ConfigClockSource>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001004:	f000 f8dc 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	003b      	movs	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	003b      	movs	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001014:	003a      	movs	r2, r7
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_TIM3_Init+0xa0>)
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f002 f8c0 	bl	80031a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001024:	f000 f8cc 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b006      	add	sp, #24
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000078 	.word	0x20000078
 8001034:	40000400 	.word	0x40000400

08001038 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_TIM14_Init+0x40>)
 800103e:	4a0f      	ldr	r2, [pc, #60]	; (800107c <MX_TIM14_Init+0x44>)
 8001040:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000;
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <MX_TIM14_Init+0x40>)
 8001044:	22fa      	movs	r2, #250	; 0xfa
 8001046:	0152      	lsls	r2, r2, #5
 8001048:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_TIM14_Init+0x40>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_TIM14_Init+0x40>)
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <MX_TIM14_Init+0x48>)
 8001054:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_TIM14_Init+0x40>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_TIM14_Init+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <MX_TIM14_Init+0x40>)
 8001064:	0018      	movs	r0, r3
 8001066:	f001 fd4b 	bl	8002b00 <HAL_TIM_Base_Init>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800106e:	f000 f8a7 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000c4 	.word	0x200000c4
 800107c:	40002000 	.word	0x40002000
 8001080:	000003e7 	.word	0x000003e7

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	240c      	movs	r4, #12
 800108c:	193b      	adds	r3, r7, r4
 800108e:	0018      	movs	r0, r3
 8001090:	2314      	movs	r3, #20
 8001092:	001a      	movs	r2, r3
 8001094:	2100      	movs	r1, #0
 8001096:	f002 f909 	bl	80032ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <MX_GPIO_Init+0x130>)
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <MX_GPIO_Init+0x130>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	03c9      	lsls	r1, r1, #15
 80010a4:	430a      	orrs	r2, r1
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x130>)
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	03db      	lsls	r3, r3, #15
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <MX_GPIO_Init+0x130>)
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x130>)
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	0289      	lsls	r1, r1, #10
 80010c0:	430a      	orrs	r2, r1
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <MX_GPIO_Init+0x130>)
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	029b      	lsls	r3, r3, #10
 80010cc:	4013      	ands	r3, r2
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <MX_GPIO_Init+0x130>)
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_GPIO_Init+0x130>)
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	02c9      	lsls	r1, r1, #11
 80010dc:	430a      	orrs	r2, r1
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <MX_GPIO_Init+0x130>)
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	02db      	lsls	r3, r3, #11
 80010e8:	4013      	ands	r3, r2
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80010ee:	23df      	movs	r3, #223	; 0xdf
 80010f0:	00d9      	lsls	r1, r3, #3
 80010f2:	2390      	movs	r3, #144	; 0x90
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	2201      	movs	r2, #1
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 f854 	bl	80021a6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <MX_GPIO_Init+0x134>)
 8001100:	2201      	movs	r2, #1
 8001102:	2102      	movs	r1, #2
 8001104:	0018      	movs	r0, r3
 8001106:	f001 f84e 	bl	80021a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <MX_GPIO_Init+0x138>)
 8001114:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	193b      	adds	r3, r7, r4
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	193a      	adds	r2, r7, r4
 800111e:	2390      	movs	r3, #144	; 0x90
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f000 feb1 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2206      	movs	r2, #6
 800112e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	193b      	adds	r3, r7, r4
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	2202      	movs	r2, #2
 800113a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	193a      	adds	r2, r7, r4
 800113e:	2390      	movs	r3, #144	; 0x90
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	0011      	movs	r1, r2
 8001144:	0018      	movs	r0, r3
 8001146:	f000 fea1 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 
                           PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800114a:	0021      	movs	r1, r4
 800114c:	187b      	adds	r3, r7, r1
 800114e:	22df      	movs	r2, #223	; 0xdf
 8001150:	00d2      	lsls	r2, r2, #3
 8001152:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2201      	movs	r2, #1
 8001158:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	000c      	movs	r4, r1
 8001168:	187a      	adds	r2, r7, r1
 800116a:	2390      	movs	r3, #144	; 0x90
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f000 fe8b 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001176:	0021      	movs	r1, r4
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2202      	movs	r2, #2
 800117c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2201      	movs	r2, #1
 8001182:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	187b      	adds	r3, r7, r1
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <MX_GPIO_Init+0x134>)
 8001194:	0019      	movs	r1, r3
 8001196:	0010      	movs	r0, r2
 8001198:	f000 fe78 	bl	8001e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2005      	movs	r0, #5
 80011a2:	f000 fc3f 	bl	8001a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f000 fc51 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b009      	add	sp, #36	; 0x24
 80011b2:	bd90      	pop	{r4, r7, pc}
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	10110000 	.word	0x10110000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_MspInit+0x54>)
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_MspInit+0x54>)
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	619a      	str	r2, [r3, #24]
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_MspInit+0x54>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4013      	ands	r3, r2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_MspInit+0x54>)
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_MspInit+0x54>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	0549      	lsls	r1, r1, #21
 80011f4:	430a      	orrs	r2, r1
 80011f6:	61da      	str	r2, [r3, #28]
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_MspInit+0x54>)
 80011fa:	69da      	ldr	r2, [r3, #28]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	055b      	lsls	r3, r3, #21
 8001200:	4013      	ands	r3, r2
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2004      	movs	r0, #4
 800120c:	f000 fc0a 	bl	8001a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001210:	2004      	movs	r0, #4
 8001212:	f000 fc1c 	bl	8001a4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d114      	bne.n	8001260 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_TIM_Base_MspInit+0x80>)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_TIM_Base_MspInit+0x80>)
 800123c:	2102      	movs	r1, #2
 800123e:	430a      	orrs	r2, r1
 8001240:	61da      	str	r2, [r3, #28]
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_TIM_Base_MspInit+0x80>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2010      	movs	r0, #16
 8001254:	f000 fbe6 	bl	8001a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001258:	2010      	movs	r0, #16
 800125a:	f000 fbf8 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800125e:	e01a      	b.n	8001296 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_TIM_Base_MspInit+0x84>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d115      	bne.n	8001296 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_TIM_Base_MspInit+0x80>)
 800126c:	69da      	ldr	r2, [r3, #28]
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_TIM_Base_MspInit+0x80>)
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	0049      	lsls	r1, r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	61da      	str	r2, [r3, #28]
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_TIM_Base_MspInit+0x80>)
 800127a:	69da      	ldr	r2, [r3, #28]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2013      	movs	r0, #19
 800128c:	f000 fbca 	bl	8001a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001290:	2013      	movs	r0, #19
 8001292:	f000 fbdc 	bl	8001a4e <HAL_NVIC_EnableIRQ>
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40000400 	.word	0x40000400
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40002000 	.word	0x40002000

080012ac <timer>:

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim14;
/* USER CODE BEGIN EV */
void timer(uint8_t trigger,uint8_t* flag,int* cnt,int interval){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	210f      	movs	r1, #15
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	1c02      	adds	r2, r0, #0
 80012be:	701a      	strb	r2, [r3, #0]
	  if (trigger) {
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <timer+0x28>
		  (*cnt)++;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e002      	b.n	80012da <timer+0x2e>
	  } else {
		  *cnt=0;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
	  }
	  if (*cnt==interval){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d105      	bne.n	80012f0 <timer+0x44>
		  *flag=1;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
		  *cnt=0;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
	  }
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b004      	add	sp, #16
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <timer_togger>:

void timer_togger(uint8_t trigger,uint8_t* flag_1, uint8_t* flag_2,int* cnt,int interval_1,int interval_2){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	210f      	movs	r1, #15
 8001306:	187b      	adds	r3, r7, r1
 8001308:	1c02      	adds	r2, r0, #0
 800130a:	701a      	strb	r2, [r3, #0]
	  if (trigger) {
 800130c:	187b      	adds	r3, r7, r1
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <timer_togger+0x28>
		  (*cnt)++;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	e008      	b.n	8001332 <timer_togger+0x3a>
	  } else {
		  *cnt=0;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
		  *flag_1= 0;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
		  *flag_2= 0;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	  }
	  if (*cnt ==interval_1) {
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	429a      	cmp	r2, r3
 800133a:	d105      	bne.n	8001348 <timer_togger+0x50>
		  *flag_1= 1;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
		  *flag_2=0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
	}
	  if (*cnt == interval_2) {
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	429a      	cmp	r2, r3
 8001350:	d108      	bne.n	8001364 <timer_togger+0x6c>
		  *flag_1= 0;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
		  *flag_2=1;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
		  *cnt=0;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
	  }
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b004      	add	sp, #16
 800136a:	bd80      	pop	{r7, pc}

0800136c <counter>:

void counter(uint8_t trigger, uint8_t* flag_1, uint8_t* flag_2, uint8_t* flag_3, uint8_t* flag_4, int* cnt){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	187b      	adds	r3, r7, r1
 800137c:	1c02      	adds	r2, r0, #0
 800137e:	701a      	strb	r2, [r3, #0]

	if(trigger){
 8001380:	187b      	adds	r3, r7, r1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <counter+0x26>
		(*cnt)++;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	601a      	str	r2, [r3, #0]

	}
	if(*cnt==1){
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10d      	bne.n	80013b6 <counter+0x4a>
		*flag_1=1;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
		*flag_2 = *flag_3 = *flag_4 = 0;
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	701a      	strb	r2, [r3, #0]
	}
	if(*cnt==2){
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d10d      	bne.n	80013da <counter+0x6e>
		*flag_2=1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
		*flag_1 = *flag_3 = *flag_4 = 0;
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	701a      	strb	r2, [r3, #0]
	}
	if(*cnt==3){
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d10d      	bne.n	80013fe <counter+0x92>
		*flag_3=1;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
		*flag_1 = *flag_2 = *flag_4 = 0;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	701a      	strb	r2, [r3, #0]
	}
	if(*cnt==4){
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d10d      	bne.n	8001422 <counter+0xb6>
		*flag_4=1;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
		*flag_2 = *flag_3 = *flag_1 = 0;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	701a      	strb	r2, [r3, #0]
	}
	if(*cnt>4){
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b04      	cmp	r3, #4
 8001428:	dd11      	ble.n	800144e <counter+0xe2>
		(*cnt)=0;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
		*flag_4= *flag_2 = *flag_3 = *flag_1 = 0;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	701a      	strb	r2, [r3, #0]

	}
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}

08001456 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <HardFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147e:	f000 fa09 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800149a:	2001      	movs	r0, #1
 800149c:	f000 febc 	bl	8002218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
   Clr_Button_trigger = 1;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <EXTI0_1_IRQHandler+0xa0>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
  	  counter(Clr_Button_trigger, &CLR_PP1_flag, &CLR_UDF_flag, &CLR_PP2_flag, &CLR_Ro_flag, &led_couter_cnt);
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <EXTI0_1_IRQHandler+0xa0>)
 80014a8:	7818      	ldrb	r0, [r3, #0]
 80014aa:	4c23      	ldr	r4, [pc, #140]	; (8001538 <EXTI0_1_IRQHandler+0xa4>)
 80014ac:	4a23      	ldr	r2, [pc, #140]	; (800153c <EXTI0_1_IRQHandler+0xa8>)
 80014ae:	4924      	ldr	r1, [pc, #144]	; (8001540 <EXTI0_1_IRQHandler+0xac>)
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <EXTI0_1_IRQHandler+0xb0>)
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <EXTI0_1_IRQHandler+0xb4>)
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	0023      	movs	r3, r4
 80014ba:	f7ff ff57 	bl	800136c <counter>
  	HAL_GPIO_WritePin(Led_Ro_Erro_Port, Led_Ro_Erro_Pin, 1);
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	0099      	lsls	r1, r3, #2
 80014c2:	2390      	movs	r3, #144	; 0x90
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	2201      	movs	r2, #1
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 fe6c 	bl	80021a6 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(Led_PP2_Erro_Port, Led_PP2_Erro_Pin, 1);
 80014ce:	2390      	movs	r3, #144	; 0x90
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	2201      	movs	r2, #1
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 fe65 	bl	80021a6 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(Led_UDF_Erro_Port, Led_UDF_Erro_Pin, 1);
 80014dc:	2390      	movs	r3, #144	; 0x90
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	2201      	movs	r2, #1
 80014e2:	2120      	movs	r1, #32
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 fe5e 	bl	80021a6 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(Led_PP_Erro_Port, Led_PP_Erro_Pin, 1);
 80014ea:	2390      	movs	r3, #144	; 0x90
 80014ec:	05db      	lsls	r3, r3, #23
 80014ee:	2201      	movs	r2, #1
 80014f0:	2108      	movs	r1, #8
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 fe57 	bl	80021a6 <HAL_GPIO_WritePin>
  			PP_out_timer_flag = UDF_out_timer_flag = PP2_out_timer_flag = Ro_out_timer_flag =0;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <EXTI0_1_IRQHandler+0xb8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <EXTI0_1_IRQHandler+0xb8>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <EXTI0_1_IRQHandler+0xbc>)
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <EXTI0_1_IRQHandler+0xbc>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <EXTI0_1_IRQHandler+0xc0>)
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <EXTI0_1_IRQHandler+0xc0>)
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <EXTI0_1_IRQHandler+0xc4>)
 8001514:	701a      	strb	r2, [r3, #0]
  			Input_Water_flag = Machine_out_time_led_cnt = Led_tank_full_on_flag = 0;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <EXTI0_1_IRQHandler+0xc8>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <EXTI0_1_IRQHandler+0xcc>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <EXTI0_1_IRQHandler+0xcc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <EXTI0_1_IRQHandler+0xd0>)
 800152a:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b001      	add	sp, #4
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000124 	.word	0x20000124
 8001538:	2000011b 	.word	0x2000011b
 800153c:	2000010a 	.word	0x2000010a
 8001540:	20000108 	.word	0x20000108
 8001544:	20000030 	.word	0x20000030
 8001548:	20000122 	.word	0x20000122
 800154c:	2000011f 	.word	0x2000011f
 8001550:	2000010e 	.word	0x2000010e
 8001554:	20000119 	.word	0x20000119
 8001558:	2000010c 	.word	0x2000010c
 800155c:	2000010f 	.word	0x2000010f
 8001560:	20000040 	.word	0x20000040
 8001564:	20000110 	.word	0x20000110

08001568 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b083      	sub	sp, #12
 800156c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <TIM3_IRQHandler+0x84>)
 8001570:	0018      	movs	r0, r3
 8001572:	f001 fb13 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  	 timer_togger(machine_out_flag&(!Input_Water_flag),&machine_out_timer1_flag, &machine_out_timer2_flag, &Machine_out_time_led_cnt,  80, 160);
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <TIM3_IRQHandler+0x88>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	425a      	negs	r2, r3
 800157c:	4153      	adcs	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <TIM3_IRQHandler+0x8c>)
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	b252      	sxtb	r2, r2
 8001588:	4013      	ands	r3, r2
 800158a:	b25b      	sxtb	r3, r3
 800158c:	b2d8      	uxtb	r0, r3
 800158e:	4c1a      	ldr	r4, [pc, #104]	; (80015f8 <TIM3_IRQHandler+0x90>)
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <TIM3_IRQHandler+0x94>)
 8001592:	491b      	ldr	r1, [pc, #108]	; (8001600 <TIM3_IRQHandler+0x98>)
 8001594:	23a0      	movs	r3, #160	; 0xa0
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2350      	movs	r3, #80	; 0x50
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	0023      	movs	r3, r4
 800159e:	f7ff feab 	bl	80012f8 <timer_togger>
     timer_togger(Input_Water_flag, &led_water_input_on_flag, &led_water_input_off_flag, &Input_water_status_led_cnt, 80, 160);
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <TIM3_IRQHandler+0x88>)
 80015a4:	7818      	ldrb	r0, [r3, #0]
 80015a6:	4c17      	ldr	r4, [pc, #92]	; (8001604 <TIM3_IRQHandler+0x9c>)
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <TIM3_IRQHandler+0xa0>)
 80015aa:	4918      	ldr	r1, [pc, #96]	; (800160c <TIM3_IRQHandler+0xa4>)
 80015ac:	23a0      	movs	r3, #160	; 0xa0
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2350      	movs	r3, #80	; 0x50
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	0023      	movs	r3, r4
 80015b6:	f7ff fe9f 	bl	80012f8 <timer_togger>
     timer(HAL_GPIO_ReadPin(Pump_Status_Port, Pump_Status_Pin), &led_fillter_flag, & led_fillter_cnt, 200);
 80015ba:	2390      	movs	r3, #144	; 0x90
 80015bc:	05db      	lsls	r3, r3, #23
 80015be:	2102      	movs	r1, #2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f000 fdd3 	bl	800216c <HAL_GPIO_ReadPin>
 80015c6:	0003      	movs	r3, r0
 80015c8:	0018      	movs	r0, r3
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <TIM3_IRQHandler+0xa8>)
 80015cc:	4911      	ldr	r1, [pc, #68]	; (8001614 <TIM3_IRQHandler+0xac>)
 80015ce:	23c8      	movs	r3, #200	; 0xc8
 80015d0:	f7ff fe6c 	bl	80012ac <timer>
     timer(watch_Dog_Trigger, &watch_Dog_Flag, &watch_Dog_cnt, 2500);
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <TIM3_IRQHandler+0xb0>)
 80015d6:	7818      	ldrb	r0, [r3, #0]
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <TIM3_IRQHandler+0xb4>)
 80015da:	4a11      	ldr	r2, [pc, #68]	; (8001620 <TIM3_IRQHandler+0xb8>)
 80015dc:	4911      	ldr	r1, [pc, #68]	; (8001624 <TIM3_IRQHandler+0xbc>)
 80015de:	f7ff fe65 	bl	80012ac <timer>
  /* USER CODE END TIM3_IRQn 1 */
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b001      	add	sp, #4
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	20000078 	.word	0x20000078
 80015f0:	20000110 	.word	0x20000110
 80015f4:	20000123 	.word	0x20000123
 80015f8:	20000040 	.word	0x20000040
 80015fc:	20000109 	.word	0x20000109
 8001600:	20000111 	.word	0x20000111
 8001604:	20000044 	.word	0x20000044
 8001608:	20000106 	.word	0x20000106
 800160c:	2000011d 	.word	0x2000011d
 8001610:	20000060 	.word	0x20000060
 8001614:	2000010d 	.word	0x2000010d
 8001618:	2000011e 	.word	0x2000011e
 800161c:	000009c4 	.word	0x000009c4
 8001620:	20000068 	.word	0x20000068
 8001624:	2000011a 	.word	0x2000011a

08001628 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b083      	sub	sp, #12
 800162c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <TIM14_IRQHandler+0xfc>)
 8001630:	0018      	movs	r0, r3
 8001632:	f001 fab3 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */
  	timer((HAL_GPIO_ReadPin(Pump_Status_Port, Pump_Status_Pin)), &Pump_Status_flag, &Pump_Status_cnt, 60);
 8001636:	2390      	movs	r3, #144	; 0x90
 8001638:	05db      	lsls	r3, r3, #23
 800163a:	2102      	movs	r1, #2
 800163c:	0018      	movs	r0, r3
 800163e:	f000 fd95 	bl	800216c <HAL_GPIO_ReadPin>
 8001642:	0003      	movs	r3, r0
 8001644:	0018      	movs	r0, r3
 8001646:	4a38      	ldr	r2, [pc, #224]	; (8001728 <TIM14_IRQHandler+0x100>)
 8001648:	4938      	ldr	r1, [pc, #224]	; (800172c <TIM14_IRQHandler+0x104>)
 800164a:	233c      	movs	r3, #60	; 0x3c
 800164c:	f7ff fe2e 	bl	80012ac <timer>
   	timer((HAL_GPIO_ReadPin(Pump_Status_Port, Pump_Status_Pin)),&Writte_data_fillter_flag,&Writte_data_fillter_cnt,40);
 8001650:	2390      	movs	r3, #144	; 0x90
 8001652:	05db      	lsls	r3, r3, #23
 8001654:	2102      	movs	r1, #2
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fd88 	bl	800216c <HAL_GPIO_ReadPin>
 800165c:	0003      	movs	r3, r0
 800165e:	0018      	movs	r0, r3
 8001660:	4a33      	ldr	r2, [pc, #204]	; (8001730 <TIM14_IRQHandler+0x108>)
 8001662:	4934      	ldr	r1, [pc, #208]	; (8001734 <TIM14_IRQHandler+0x10c>)
 8001664:	2328      	movs	r3, #40	; 0x28
 8001666:	f7ff fe21 	bl	80012ac <timer>
   	timer((HAL_GPIO_ReadPin(Button_CLR_Port, Button_CLR_Pin)),&CLR_Button_flag,&Clr_button_flag_cnt,3);
 800166a:	2390      	movs	r3, #144	; 0x90
 800166c:	05db      	lsls	r3, r3, #23
 800166e:	2101      	movs	r1, #1
 8001670:	0018      	movs	r0, r3
 8001672:	f000 fd7b 	bl	800216c <HAL_GPIO_ReadPin>
 8001676:	0003      	movs	r3, r0
 8001678:	0018      	movs	r0, r3
 800167a:	4a2f      	ldr	r2, [pc, #188]	; (8001738 <TIM14_IRQHandler+0x110>)
 800167c:	492f      	ldr	r1, [pc, #188]	; (800173c <TIM14_IRQHandler+0x114>)
 800167e:	2303      	movs	r3, #3
 8001680:	f7ff fe14 	bl	80012ac <timer>
   	timer_togger(!(HAL_GPIO_ReadPin(Pump_Status_Port, Pump_Status_Pin))&&!Clr_Button_trigger	,&Led_tank_full_on_flag	,&Led_tank_full_off_flag, &Led_tank_on_off_cnt, 5, 10);
 8001684:	2390      	movs	r3, #144	; 0x90
 8001686:	05db      	lsls	r3, r3, #23
 8001688:	2102      	movs	r1, #2
 800168a:	0018      	movs	r0, r3
 800168c:	f000 fd6e 	bl	800216c <HAL_GPIO_ReadPin>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d105      	bne.n	80016a0 <TIM14_IRQHandler+0x78>
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <TIM14_IRQHandler+0x118>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <TIM14_IRQHandler+0x78>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <TIM14_IRQHandler+0x7a>
 80016a0:	2300      	movs	r3, #0
 80016a2:	b2d8      	uxtb	r0, r3
 80016a4:	4c27      	ldr	r4, [pc, #156]	; (8001744 <TIM14_IRQHandler+0x11c>)
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <TIM14_IRQHandler+0x120>)
 80016a8:	4928      	ldr	r1, [pc, #160]	; (800174c <TIM14_IRQHandler+0x124>)
 80016aa:	230a      	movs	r3, #10
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2305      	movs	r3, #5
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	0023      	movs	r3, r4
 80016b4:	f7ff fe20 	bl	80012f8 <timer_togger>
   	timer(Input_Water_flag,&time_on_Input_Water_flag,&time_on_Input_Water_cnt,4);
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <TIM14_IRQHandler+0x128>)
 80016ba:	7818      	ldrb	r0, [r3, #0]
 80016bc:	4a25      	ldr	r2, [pc, #148]	; (8001754 <TIM14_IRQHandler+0x12c>)
 80016be:	4926      	ldr	r1, [pc, #152]	; (8001758 <TIM14_IRQHandler+0x130>)
 80016c0:	2304      	movs	r3, #4
 80016c2:	f7ff fdf3 	bl	80012ac <timer>
   	timer(machine_out_flag,&time_on_Machine_out_flag,&time_on_Machine_out_cnt,4);
 80016c6:	4b25      	ldr	r3, [pc, #148]	; (800175c <TIM14_IRQHandler+0x134>)
 80016c8:	7818      	ldrb	r0, [r3, #0]
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <TIM14_IRQHandler+0x138>)
 80016cc:	4925      	ldr	r1, [pc, #148]	; (8001764 <TIM14_IRQHandler+0x13c>)
 80016ce:	2304      	movs	r3, #4
 80016d0:	f7ff fdec 	bl	80012ac <timer>
   	timer(time_on_PP_out_trigger,&time_on_PP_flag,&time_on_PP_out_cnt,4);
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <TIM14_IRQHandler+0x140>)
 80016d6:	7818      	ldrb	r0, [r3, #0]
 80016d8:	4a24      	ldr	r2, [pc, #144]	; (800176c <TIM14_IRQHandler+0x144>)
 80016da:	4925      	ldr	r1, [pc, #148]	; (8001770 <TIM14_IRQHandler+0x148>)
 80016dc:	2304      	movs	r3, #4
 80016de:	f7ff fde5 	bl	80012ac <timer>
   	timer(time_on_UDF_out_trigger,&time_on_UDF_flag,&time_on_UDF_out_cnt,4);
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <TIM14_IRQHandler+0x14c>)
 80016e4:	7818      	ldrb	r0, [r3, #0]
 80016e6:	4a24      	ldr	r2, [pc, #144]	; (8001778 <TIM14_IRQHandler+0x150>)
 80016e8:	4924      	ldr	r1, [pc, #144]	; (800177c <TIM14_IRQHandler+0x154>)
 80016ea:	2304      	movs	r3, #4
 80016ec:	f7ff fdde 	bl	80012ac <timer>
   	timer(time_on_PP2_out_trigger, &time_on_PP2_flag, &time_on_PP2_out_cnt, 4);
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <TIM14_IRQHandler+0x158>)
 80016f2:	7818      	ldrb	r0, [r3, #0]
 80016f4:	4a23      	ldr	r2, [pc, #140]	; (8001784 <TIM14_IRQHandler+0x15c>)
 80016f6:	4924      	ldr	r1, [pc, #144]	; (8001788 <TIM14_IRQHandler+0x160>)
 80016f8:	2304      	movs	r3, #4
 80016fa:	f7ff fdd7 	bl	80012ac <timer>
   	timer(time_on_Ro_out_trigger, &time_on_Ro_flag, &time_on_Ro_out_cnt, 4);
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <TIM14_IRQHandler+0x164>)
 8001700:	7818      	ldrb	r0, [r3, #0]
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <TIM14_IRQHandler+0x168>)
 8001704:	4923      	ldr	r1, [pc, #140]	; (8001794 <TIM14_IRQHandler+0x16c>)
 8001706:	2304      	movs	r3, #4
 8001708:	f7ff fdd0 	bl	80012ac <timer>
   	timer(dislay_erro_lock_trigger,&dislay_erro_lock_flag, &dislay_erro_lock_cnt, 4);
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <TIM14_IRQHandler+0x170>)
 800170e:	7818      	ldrb	r0, [r3, #0]
 8001710:	4a22      	ldr	r2, [pc, #136]	; (800179c <TIM14_IRQHandler+0x174>)
 8001712:	4923      	ldr	r1, [pc, #140]	; (80017a0 <TIM14_IRQHandler+0x178>)
 8001714:	2304      	movs	r3, #4
 8001716:	f7ff fdc9 	bl	80012ac <timer>

  /* USER CODE END TIM14_IRQn 1 */
}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b001      	add	sp, #4
 8001720:	bd90      	pop	{r4, r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	200000c4 	.word	0x200000c4
 8001728:	20000034 	.word	0x20000034
 800172c:	20000120 	.word	0x20000120
 8001730:	20000038 	.word	0x20000038
 8001734:	20000121 	.word	0x20000121
 8001738:	2000002c 	.word	0x2000002c
 800173c:	20000115 	.word	0x20000115
 8001740:	20000124 	.word	0x20000124
 8001744:	2000003c 	.word	0x2000003c
 8001748:	20000105 	.word	0x20000105
 800174c:	2000010f 	.word	0x2000010f
 8001750:	20000110 	.word	0x20000110
 8001754:	20000058 	.word	0x20000058
 8001758:	20000127 	.word	0x20000127
 800175c:	20000123 	.word	0x20000123
 8001760:	2000005c 	.word	0x2000005c
 8001764:	20000117 	.word	0x20000117
 8001768:	20000125 	.word	0x20000125
 800176c:	20000048 	.word	0x20000048
 8001770:	20000116 	.word	0x20000116
 8001774:	20000112 	.word	0x20000112
 8001778:	2000004c 	.word	0x2000004c
 800177c:	20000113 	.word	0x20000113
 8001780:	20000114 	.word	0x20000114
 8001784:	20000050 	.word	0x20000050
 8001788:	20000118 	.word	0x20000118
 800178c:	20000107 	.word	0x20000107
 8001790:	20000054 	.word	0x20000054
 8001794:	2000011c 	.word	0x2000011c
 8001798:	20000126 	.word	0x20000126
 800179c:	20000064 	.word	0x20000064
 80017a0:	20000128 	.word	0x20000128

080017a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <LoopForever+0x6>)
  ldr r1, =_edata
 80017b6:	490e      	ldr	r1, [pc, #56]	; (80017f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <LoopForever+0xe>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017cc:	4c0b      	ldr	r4, [pc, #44]	; (80017fc <LoopForever+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017da:	f7ff ffe3 	bl	80017a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80017de:	f001 fd41 	bl	8003264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e2:	f7ff fb33 	bl	8000e4c <main>

080017e6 <LoopForever>:

LoopForever:
    b LoopForever
 80017e6:	e7fe      	b.n	80017e6 <LoopForever>
  ldr   r0, =_estack
 80017e8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017f4:	0800330c 	.word	0x0800330c
  ldr r2, =_sbss
 80017f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017fc:	20000150 	.word	0x20000150

08001800 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_IRQHandler>
	...

08001804 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_Init+0x24>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_Init+0x24>)
 800180e:	2110      	movs	r1, #16
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001814:	2000      	movs	r0, #0
 8001816:	f000 f809 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181a:	f7ff fcd7 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_InitTick+0x5c>)
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	0019      	movs	r1, r3
 800183e:	23fa      	movs	r3, #250	; 0xfa
 8001840:	0098      	lsls	r0, r3, #2
 8001842:	f7fe fc61 	bl	8000108 <__udivsi3>
 8001846:	0003      	movs	r3, r0
 8001848:	0019      	movs	r1, r3
 800184a:	0020      	movs	r0, r4
 800184c:	f7fe fc5c 	bl	8000108 <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f90b 	bl	8001a6e <HAL_SYSTICK_Config>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d001      	beq.n	8001860 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e00f      	b.n	8001880 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d80b      	bhi.n	800187e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	2301      	movs	r3, #1
 800186a:	425b      	negs	r3, r3
 800186c:	2200      	movs	r2, #0
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f8d8 	bl	8001a24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_InitTick+0x64>)
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b003      	add	sp, #12
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000000 	.word	0x20000000
 800188c:	20000008 	.word	0x20000008
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	001a      	movs	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	18d2      	adds	r2, r2, r3
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_IncTick+0x20>)
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	20000008 	.word	0x20000008
 80018b4:	2000012c 	.word	0x2000012c

080018b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	2000012c 	.word	0x2000012c

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	0002      	movs	r2, r0
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	1dfb      	adds	r3, r7, #7
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b7f      	cmp	r3, #127	; 0x7f
 80018de:	d809      	bhi.n	80018f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	001a      	movs	r2, r3
 80018e6:	231f      	movs	r3, #31
 80018e8:	401a      	ands	r2, r3
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_EnableIRQ+0x30>)
 80018ec:	2101      	movs	r1, #1
 80018ee:	4091      	lsls	r1, r2
 80018f0:	000a      	movs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
  }
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	0002      	movs	r2, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b7f      	cmp	r3, #127	; 0x7f
 8001914:	d828      	bhi.n	8001968 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001916:	4a2f      	ldr	r2, [pc, #188]	; (80019d4 <__NVIC_SetPriority+0xd4>)
 8001918:	1dfb      	adds	r3, r7, #7
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b25b      	sxtb	r3, r3
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	33c0      	adds	r3, #192	; 0xc0
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	589b      	ldr	r3, [r3, r2]
 8001926:	1dfa      	adds	r2, r7, #7
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	0011      	movs	r1, r2
 800192c:	2203      	movs	r2, #3
 800192e:	400a      	ands	r2, r1
 8001930:	00d2      	lsls	r2, r2, #3
 8001932:	21ff      	movs	r1, #255	; 0xff
 8001934:	4091      	lsls	r1, r2
 8001936:	000a      	movs	r2, r1
 8001938:	43d2      	mvns	r2, r2
 800193a:	401a      	ands	r2, r3
 800193c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	019b      	lsls	r3, r3, #6
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	401a      	ands	r2, r3
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	0018      	movs	r0, r3
 800194c:	2303      	movs	r3, #3
 800194e:	4003      	ands	r3, r0
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001954:	481f      	ldr	r0, [pc, #124]	; (80019d4 <__NVIC_SetPriority+0xd4>)
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b25b      	sxtb	r3, r3
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	430a      	orrs	r2, r1
 8001960:	33c0      	adds	r3, #192	; 0xc0
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001966:	e031      	b.n	80019cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <__NVIC_SetPriority+0xd8>)
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0019      	movs	r1, r3
 8001970:	230f      	movs	r3, #15
 8001972:	400b      	ands	r3, r1
 8001974:	3b08      	subs	r3, #8
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3306      	adds	r3, #6
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	18d3      	adds	r3, r2, r3
 800197e:	3304      	adds	r3, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1dfa      	adds	r2, r7, #7
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	0011      	movs	r1, r2
 8001988:	2203      	movs	r2, #3
 800198a:	400a      	ands	r2, r1
 800198c:	00d2      	lsls	r2, r2, #3
 800198e:	21ff      	movs	r1, #255	; 0xff
 8001990:	4091      	lsls	r1, r2
 8001992:	000a      	movs	r2, r1
 8001994:	43d2      	mvns	r2, r2
 8001996:	401a      	ands	r2, r3
 8001998:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	22ff      	movs	r2, #255	; 0xff
 80019a0:	401a      	ands	r2, r3
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	0018      	movs	r0, r3
 80019a8:	2303      	movs	r3, #3
 80019aa:	4003      	ands	r3, r0
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <__NVIC_SetPriority+0xd8>)
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	001c      	movs	r4, r3
 80019b8:	230f      	movs	r3, #15
 80019ba:	4023      	ands	r3, r4
 80019bc:	3b08      	subs	r3, #8
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	430a      	orrs	r2, r1
 80019c2:	3306      	adds	r3, #6
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	18c3      	adds	r3, r0, r3
 80019c8:	3304      	adds	r3, #4
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b003      	add	sp, #12
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <SysTick_Config+0x40>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e010      	b.n	8001a14 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <SysTick_Config+0x44>)
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	3a01      	subs	r2, #1
 80019f8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	2301      	movs	r3, #1
 80019fc:	425b      	negs	r3, r3
 80019fe:	2103      	movs	r1, #3
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff ff7d 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <SysTick_Config+0x44>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <SysTick_Config+0x44>)
 8001a0e:	2207      	movs	r2, #7
 8001a10:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	00ffffff 	.word	0x00ffffff
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	210f      	movs	r1, #15
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	1c02      	adds	r2, r0, #0
 8001a34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	0002      	movs	r2, r0
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff ff33 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff ffaf 	bl	80019dc <SysTick_Config>
 8001a7e:	0003      	movs	r3, r0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	603a      	str	r2, [r7, #0]
 8001a94:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a96:	2317      	movs	r3, #23
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8001a9e:	2316      	movs	r3, #22
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8001aa6:	2315      	movs	r3, #21
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001aae:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <HAL_FLASH_Program+0x120>)
 8001ab0:	7e1b      	ldrb	r3, [r3, #24]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_FLASH_Program+0x32>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e072      	b.n	8001ba0 <HAL_FLASH_Program+0x118>
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_FLASH_Program+0x120>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ac0:	2317      	movs	r3, #23
 8001ac2:	18fe      	adds	r6, r7, r3
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_FLASH_Program+0x124>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 f8c4 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001acc:	0003      	movs	r3, r0
 8001ace:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8001ad0:	2317      	movs	r3, #23
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d15c      	bne.n	8001b94 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d104      	bne.n	8001aea <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001ae0:	2315      	movs	r3, #21
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e00b      	b.n	8001b02 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d104      	bne.n	8001afa <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001af0:	2315      	movs	r3, #21
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	2202      	movs	r2, #2
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e003      	b.n	8001b02 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001afa:	2315      	movs	r3, #21
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2204      	movs	r2, #4
 8001b00:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8001b02:	2316      	movs	r3, #22
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e039      	b.n	8001b80 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b0c:	2116      	movs	r1, #22
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	005a      	lsls	r2, r3, #1
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	18d0      	adds	r0, r2, r3
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	001a      	movs	r2, r3
 8001b20:	3a20      	subs	r2, #32
 8001b22:	2a00      	cmp	r2, #0
 8001b24:	db03      	blt.n	8001b2e <HAL_FLASH_Program+0xa6>
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	40d1      	lsrs	r1, r2
 8001b2a:	000c      	movs	r4, r1
 8001b2c:	e008      	b.n	8001b40 <HAL_FLASH_Program+0xb8>
 8001b2e:	2220      	movs	r2, #32
 8001b30:	1ad2      	subs	r2, r2, r3
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4091      	lsls	r1, r2
 8001b36:	000a      	movs	r2, r1
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	40d9      	lsrs	r1, r3
 8001b3c:	000c      	movs	r4, r1
 8001b3e:	4314      	orrs	r4, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	40da      	lsrs	r2, r3
 8001b44:	0015      	movs	r5, r2
 8001b46:	b2a3      	uxth	r3, r4
 8001b48:	0019      	movs	r1, r3
 8001b4a:	f000 f867 	bl	8001c1c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b4e:	2317      	movs	r3, #23
 8001b50:	18fe      	adds	r6, r7, r3
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_FLASH_Program+0x124>)
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 f87d 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_FLASH_Program+0x128>)
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_FLASH_Program+0x128>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	438a      	bics	r2, r1
 8001b68:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001b6a:	2317      	movs	r3, #23
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10e      	bne.n	8001b92 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8001b74:	2116      	movs	r1, #22
 8001b76:	187b      	adds	r3, r7, r1
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	3201      	adds	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	2316      	movs	r3, #22
 8001b82:	18fa      	adds	r2, r7, r3
 8001b84:	2315      	movs	r3, #21
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d3bd      	bcc.n	8001b0c <HAL_FLASH_Program+0x84>
 8001b90:	e000      	b.n	8001b94 <HAL_FLASH_Program+0x10c>
      {
        break;
 8001b92:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_FLASH_Program+0x120>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	761a      	strb	r2, [r3, #24]

  return status;
 8001b9a:	2317      	movs	r3, #23
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b007      	add	sp, #28
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	20000130 	.word	0x20000130
 8001bac:	0000c350 	.word	0x0000c350
 8001bb0:	40022000 	.word	0x40022000

08001bb4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_FLASH_Unlock+0x40>)
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_FLASH_Unlock+0x40>)
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_FLASH_Unlock+0x44>)
 8001bce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_FLASH_Unlock+0x40>)
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_FLASH_Unlock+0x48>)
 8001bd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_FLASH_Unlock+0x40>)
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d002      	beq.n	8001be6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001be0:	1dfb      	adds	r3, r7, #7
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	45670123 	.word	0x45670123
 8001bfc:	cdef89ab 	.word	0xcdef89ab

08001c00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_FLASH_Lock+0x18>)
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_FLASH_Lock+0x18>)
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40022000 	.word	0x40022000

08001c1c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	000a      	movs	r2, r1
 8001c26:	1cbb      	adds	r3, r7, #2
 8001c28:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <FLASH_Program_HalfWord+0x30>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <FLASH_Program_HalfWord+0x34>)
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <FLASH_Program_HalfWord+0x34>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1cba      	adds	r2, r7, #2
 8001c40:	8812      	ldrh	r2, [r2, #0]
 8001c42:	801a      	strh	r2, [r3, #0]
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000130 	.word	0x20000130
 8001c50:	40022000 	.word	0x40022000

08001c54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff fe2c 	bl	80018b8 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001c64:	e00f      	b.n	8001c86 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	d00c      	beq.n	8001c86 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <FLASH_WaitForLastOperation+0x2e>
 8001c72:	f7ff fe21 	bl	80018b8 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d201      	bcs.n	8001c86 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e01f      	b.n	8001cc6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d0e9      	beq.n	8001c66 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2220      	movs	r2, #32
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b20      	cmp	r3, #32
 8001c9c:	d102      	bne.n	8001ca4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d005      	beq.n	8001cbc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d103      	bne.n	8001cc4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001cbc:	f000 f80a 	bl	8001cd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b004      	add	sp, #16
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <FLASH_SetErrorCode+0x58>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d109      	bne.n	8001cfe <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <FLASH_SetErrorCode+0x5c>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <FLASH_SetErrorCode+0x5c>)
 8001cf4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <FLASH_SetErrorCode+0x58>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d109      	bne.n	8001d1e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <FLASH_SetErrorCode+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <FLASH_SetErrorCode+0x5c>)
 8001d14:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001d1e:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <FLASH_SetErrorCode+0x58>)
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
}  
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	20000130 	.word	0x20000130

08001d34 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001d34:	b5b0      	push	{r4, r5, r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d3e:	230f      	movs	r3, #15
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_FLASHEx_Erase+0xe0>)
 8001d4c:	7e1b      	ldrb	r3, [r3, #24]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_FLASHEx_Erase+0x22>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e05a      	b.n	8001e0c <HAL_FLASHEx_Erase+0xd8>
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_FLASHEx_Erase+0xe0>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d116      	bne.n	8001d92 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d64:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <HAL_FLASHEx_Erase+0xe4>)
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff ff74 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001d6c:	1e03      	subs	r3, r0, #0
 8001d6e:	d147      	bne.n	8001e00 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001d70:	f000 f856 	bl	8001e20 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d74:	230f      	movs	r3, #15
 8001d76:	18fc      	adds	r4, r7, r3
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_FLASHEx_Erase+0xe4>)
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff ff6a 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001d80:	0003      	movs	r3, r0
 8001d82:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_FLASHEx_Erase+0xe8>)
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_FLASHEx_Erase+0xe8>)
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	e036      	b.n	8001e00 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_FLASHEx_Erase+0xe4>)
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d130      	bne.n	8001e00 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4252      	negs	r2, r2
 8001da4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	e01f      	b.n	8001dee <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 f84d 	bl	8001e50 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db6:	250f      	movs	r5, #15
 8001db8:	197c      	adds	r4, r7, r5
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_FLASHEx_Erase+0xe4>)
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff ff49 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_FLASHEx_Erase+0xe8>)
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_FLASHEx_Erase+0xe8>)
 8001dcc:	2102      	movs	r1, #2
 8001dce:	438a      	bics	r2, r1
 8001dd0:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001dd2:	197b      	adds	r3, r7, r5
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	601a      	str	r2, [r3, #0]
            break;
 8001de0:	e00e      	b.n	8001e00 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	00d2      	lsls	r2, r2, #3
 8001de8:	4694      	mov	ip, r2
 8001dea:	4463      	add	r3, ip
 8001dec:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	029a      	lsls	r2, r3, #10
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d3d6      	bcc.n	8001dae <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_FLASHEx_Erase+0xe0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	761a      	strb	r2, [r3, #24]

  return status;
 8001e06:	230f      	movs	r3, #15
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b004      	add	sp, #16
 8001e12:	bdb0      	pop	{r4, r5, r7, pc}
 8001e14:	20000130 	.word	0x20000130
 8001e18:	0000c350 	.word	0x0000c350
 8001e1c:	40022000 	.word	0x40022000

08001e20 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <FLASH_MassErase+0x28>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <FLASH_MassErase+0x2c>)
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <FLASH_MassErase+0x2c>)
 8001e30:	2104      	movs	r1, #4
 8001e32:	430a      	orrs	r2, r1
 8001e34:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <FLASH_MassErase+0x2c>)
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <FLASH_MassErase+0x2c>)
 8001e3c:	2140      	movs	r1, #64	; 0x40
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	611a      	str	r2, [r3, #16]
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000130 	.word	0x20000130
 8001e4c:	40022000 	.word	0x40022000

08001e50 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <FLASH_PageErase+0x34>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <FLASH_PageErase+0x38>)
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <FLASH_PageErase+0x38>)
 8001e64:	2102      	movs	r1, #2
 8001e66:	430a      	orrs	r2, r1
 8001e68:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <FLASH_PageErase+0x38>)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <FLASH_PageErase+0x38>)
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <FLASH_PageErase+0x38>)
 8001e76:	2140      	movs	r1, #64	; 0x40
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	611a      	str	r2, [r3, #16]
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000130 	.word	0x20000130
 8001e88:	40022000 	.word	0x40022000

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e14f      	b.n	800213c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4091      	lsls	r1, r2
 8001ea6:	000a      	movs	r2, r1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d100      	bne.n	8001eb4 <HAL_GPIO_Init+0x28>
 8001eb2:	e140      	b.n	8002136 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x38>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	58d3      	ldr	r3, [r2, r3]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	409a      	lsls	r2, r3
 8001ede:	0013      	movs	r3, r2
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2107      	movs	r1, #7
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	409a      	lsls	r2, r3
 8001f32:	0013      	movs	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d00b      	beq.n	8001f60 <HAL_GPIO_Init+0xd4>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f54:	2b11      	cmp	r3, #17
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b12      	cmp	r3, #18
 8001f5e:	d130      	bne.n	8001fc2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	0013      	movs	r3, r2
 8001f70:	43da      	mvns	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	409a      	lsls	r2, r3
 8001f82:	0013      	movs	r3, r2
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f96:	2201      	movs	r2, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	2201      	movs	r2, #1
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	0013      	movs	r3, r2
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	055b      	lsls	r3, r3, #21
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d100      	bne.n	8002000 <HAL_GPIO_Init+0x174>
 8001ffe:	e09a      	b.n	8002136 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002000:	4b54      	ldr	r3, [pc, #336]	; (8002154 <HAL_GPIO_Init+0x2c8>)
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_GPIO_Init+0x2c8>)
 8002006:	2101      	movs	r1, #1
 8002008:	430a      	orrs	r2, r1
 800200a:	619a      	str	r2, [r3, #24]
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_GPIO_Init+0x2c8>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002018:	4a4f      	ldr	r2, [pc, #316]	; (8002158 <HAL_GPIO_Init+0x2cc>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	589b      	ldr	r3, [r3, r2]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2203      	movs	r2, #3
 800202a:	4013      	ands	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	409a      	lsls	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	43da      	mvns	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	2390      	movs	r3, #144	; 0x90
 8002040:	05db      	lsls	r3, r3, #23
 8002042:	429a      	cmp	r2, r3
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x1e2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a44      	ldr	r2, [pc, #272]	; (800215c <HAL_GPIO_Init+0x2d0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x1de>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_GPIO_Init+0x2d4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x1da>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a42      	ldr	r2, [pc, #264]	; (8002164 <HAL_GPIO_Init+0x2d8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x1d6>
 800205e:	2303      	movs	r3, #3
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x1e4>
 8002062:	2305      	movs	r3, #5
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x1e4>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x1e4>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x1e4>
 800206e:	2300      	movs	r3, #0
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	2103      	movs	r1, #3
 8002074:	400a      	ands	r2, r1
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_GPIO_Init+0x2cc>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208e:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	025b      	lsls	r3, r3, #9
 80020a6:	4013      	ands	r3, r2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	4013      	ands	r3, r2
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43da      	mvns	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	035b      	lsls	r3, r3, #13
 80020fa:	4013      	ands	r3, r2
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43da      	mvns	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	039b      	lsls	r3, r3, #14
 8002124:	4013      	ands	r3, r2
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	40da      	lsrs	r2, r3
 8002144:	1e13      	subs	r3, r2, #0
 8002146:	d000      	beq.n	800214a <HAL_GPIO_Init+0x2be>
 8002148:	e6a8      	b.n	8001e9c <HAL_GPIO_Init+0x10>
  } 
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b006      	add	sp, #24
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	48000400 	.word	0x48000400
 8002160:	48000800 	.word	0x48000800
 8002164:	48000c00 	.word	0x48000c00
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	000a      	movs	r2, r1
 8002176:	1cbb      	adds	r3, r7, #2
 8002178:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	1cba      	adds	r2, r7, #2
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	4013      	ands	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002186:	230f      	movs	r3, #15
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e003      	b.n	8002198 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002190:	230f      	movs	r3, #15
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	781b      	ldrb	r3, [r3, #0]
  }
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	0008      	movs	r0, r1
 80021b0:	0011      	movs	r1, r2
 80021b2:	1cbb      	adds	r3, r7, #2
 80021b4:	1c02      	adds	r2, r0, #0
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	1c7b      	adds	r3, r7, #1
 80021ba:	1c0a      	adds	r2, r1, #0
 80021bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021be:	1c7b      	adds	r3, r7, #1
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c6:	1cbb      	adds	r3, r7, #2
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ce:	e003      	b.n	80021d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d0:	1cbb      	adds	r3, r7, #2
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	000a      	movs	r2, r1
 80021ea:	1cbb      	adds	r3, r7, #2
 80021ec:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	1cba      	adds	r2, r7, #2
 80021f4:	8812      	ldrh	r2, [r2, #0]
 80021f6:	4013      	ands	r3, r2
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021fa:	1cbb      	adds	r3, r7, #2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	041a      	lsls	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002204:	e003      	b.n	800220e <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002206:	1cbb      	adds	r3, r7, #2
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	0002      	movs	r2, r0
 8002220:	1dbb      	adds	r3, r7, #6
 8002222:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	1dba      	adds	r2, r7, #6
 800222a:	8812      	ldrh	r2, [r2, #0]
 800222c:	4013      	ands	r3, r2
 800222e:	d008      	beq.n	8002242 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002232:	1dba      	adds	r2, r7, #6
 8002234:	8812      	ldrh	r2, [r2, #0]
 8002236:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002238:	1dbb      	adds	r3, r7, #6
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f807 	bl	8002250 <HAL_GPIO_EXTI_Callback>
  }
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	b002      	add	sp, #8
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	0002      	movs	r2, r0
 8002258:	1dbb      	adds	r3, r7, #6
 800225a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e303      	b.n	800287e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	4013      	ands	r3, r2
 800227e:	d100      	bne.n	8002282 <HAL_RCC_OscConfig+0x1e>
 8002280:	e08d      	b.n	800239e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002282:	4bc4      	ldr	r3, [pc, #784]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	220c      	movs	r2, #12
 8002288:	4013      	ands	r3, r2
 800228a:	2b04      	cmp	r3, #4
 800228c:	d00e      	beq.n	80022ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800228e:	4bc1      	ldr	r3, [pc, #772]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	220c      	movs	r2, #12
 8002294:	4013      	ands	r3, r2
 8002296:	2b08      	cmp	r3, #8
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x64>
 800229a:	4bbe      	ldr	r3, [pc, #760]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	401a      	ands	r2, r3
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	025b      	lsls	r3, r3, #9
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10d      	bne.n	80022c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4bb9      	ldr	r3, [pc, #740]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	4013      	ands	r3, r2
 80022b6:	d100      	bne.n	80022ba <HAL_RCC_OscConfig+0x56>
 80022b8:	e070      	b.n	800239c <HAL_RCC_OscConfig+0x138>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d000      	beq.n	80022c4 <HAL_RCC_OscConfig+0x60>
 80022c2:	e06b      	b.n	800239c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e2da      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x7c>
 80022d0:	4bb0      	ldr	r3, [pc, #704]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4baf      	ldr	r3, [pc, #700]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	0249      	lsls	r1, r1, #9
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e02f      	b.n	8002340 <HAL_RCC_OscConfig+0xdc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x9e>
 80022e8:	4baa      	ldr	r3, [pc, #680]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4ba9      	ldr	r3, [pc, #676]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022ee:	49aa      	ldr	r1, [pc, #680]	; (8002598 <HAL_RCC_OscConfig+0x334>)
 80022f0:	400a      	ands	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	4ba7      	ldr	r3, [pc, #668]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4ba6      	ldr	r3, [pc, #664]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022fa:	49a8      	ldr	r1, [pc, #672]	; (800259c <HAL_RCC_OscConfig+0x338>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e01e      	b.n	8002340 <HAL_RCC_OscConfig+0xdc>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d10e      	bne.n	8002328 <HAL_RCC_OscConfig+0xc4>
 800230a:	4ba2      	ldr	r3, [pc, #648]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4ba1      	ldr	r3, [pc, #644]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	02c9      	lsls	r1, r1, #11
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4b9e      	ldr	r3, [pc, #632]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b9d      	ldr	r3, [pc, #628]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	0249      	lsls	r1, r1, #9
 8002322:	430a      	orrs	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xdc>
 8002328:	4b9a      	ldr	r3, [pc, #616]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b99      	ldr	r3, [pc, #612]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800232e:	499a      	ldr	r1, [pc, #616]	; (8002598 <HAL_RCC_OscConfig+0x334>)
 8002330:	400a      	ands	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	4b97      	ldr	r3, [pc, #604]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b96      	ldr	r3, [pc, #600]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800233a:	4998      	ldr	r1, [pc, #608]	; (800259c <HAL_RCC_OscConfig+0x338>)
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d014      	beq.n	8002372 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fab6 	bl	80018b8 <HAL_GetTick>
 800234c:	0003      	movs	r3, r0
 800234e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002352:	f7ff fab1 	bl	80018b8 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b64      	cmp	r3, #100	; 0x64
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e28c      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002364:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	4013      	ands	r3, r2
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0xee>
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff faa1 	bl	80018b8 <HAL_GetTick>
 8002376:	0003      	movs	r3, r0
 8002378:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fa9c 	bl	80018b8 <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e277      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	029b      	lsls	r3, r3, #10
 8002396:	4013      	ands	r3, r2
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x118>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d100      	bne.n	80023aa <HAL_RCC_OscConfig+0x146>
 80023a8:	e069      	b.n	800247e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023aa:	4b7a      	ldr	r3, [pc, #488]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	220c      	movs	r2, #12
 80023b0:	4013      	ands	r3, r2
 80023b2:	d00b      	beq.n	80023cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023b4:	4b77      	ldr	r3, [pc, #476]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	220c      	movs	r2, #12
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d11c      	bne.n	80023fa <HAL_RCC_OscConfig+0x196>
 80023c0:	4b74      	ldr	r3, [pc, #464]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	4013      	ands	r3, r2
 80023ca:	d116      	bne.n	80023fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023cc:	4b71      	ldr	r3, [pc, #452]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x17e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e24d      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	22f8      	movs	r2, #248	; 0xf8
 80023e8:	4393      	bics	r3, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00da      	lsls	r2, r3, #3
 80023f2:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f8:	e041      	b.n	800247e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d024      	beq.n	800244c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002402:	4b64      	ldr	r3, [pc, #400]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002408:	2101      	movs	r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7ff fa53 	bl	80018b8 <HAL_GetTick>
 8002412:	0003      	movs	r3, r0
 8002414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002418:	f7ff fa4e 	bl	80018b8 <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e229      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b5a      	ldr	r3, [pc, #360]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2202      	movs	r2, #2
 8002430:	4013      	ands	r3, r2
 8002432:	d0f1      	beq.n	8002418 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	22f8      	movs	r2, #248	; 0xf8
 800243a:	4393      	bics	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00da      	lsls	r2, r3, #3
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e018      	b.n	800247e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244c:	4b51      	ldr	r3, [pc, #324]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002452:	2101      	movs	r1, #1
 8002454:	438a      	bics	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fa2e 	bl	80018b8 <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff fa29 	bl	80018b8 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e204      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002474:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2202      	movs	r2, #2
 800247a:	4013      	ands	r3, r2
 800247c:	d1f1      	bne.n	8002462 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2208      	movs	r2, #8
 8002484:	4013      	ands	r3, r2
 8002486:	d036      	beq.n	80024f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d019      	beq.n	80024c4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002490:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff fa0c 	bl	80018b8 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff fa07 	bl	80018b8 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1e2      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b8:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2202      	movs	r2, #2
 80024be:	4013      	ands	r3, r2
 80024c0:	d0f1      	beq.n	80024a6 <HAL_RCC_OscConfig+0x242>
 80024c2:	e018      	b.n	80024f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c4:	4b33      	ldr	r3, [pc, #204]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	438a      	bics	r2, r1
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7ff f9f2 	bl	80018b8 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024da:	f7ff f9ed 	bl	80018b8 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1c8      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d1f1      	bne.n	80024da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2204      	movs	r2, #4
 80024fc:	4013      	ands	r3, r2
 80024fe:	d100      	bne.n	8002502 <HAL_RCC_OscConfig+0x29e>
 8002500:	e0b6      	b.n	8002670 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	231f      	movs	r3, #31
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	055b      	lsls	r3, r3, #21
 8002512:	4013      	ands	r3, r2
 8002514:	d111      	bne.n	800253a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0549      	lsls	r1, r1, #21
 8002520:	430a      	orrs	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	055b      	lsls	r3, r3, #21
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_OscConfig+0x33c>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4013      	ands	r3, r2
 8002544:	d11a      	bne.n	800257c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_RCC_OscConfig+0x33c>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_RCC_OscConfig+0x33c>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0049      	lsls	r1, r1, #1
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002554:	f7ff f9b0 	bl	80018b8 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7ff f9ab 	bl	80018b8 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e186      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x33c>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d10f      	bne.n	80025a4 <HAL_RCC_OscConfig+0x340>
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002586:	6a1a      	ldr	r2, [r3, #32]
 8002588:	4b02      	ldr	r3, [pc, #8]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800258a:	2101      	movs	r1, #1
 800258c:	430a      	orrs	r2, r1
 800258e:	621a      	str	r2, [r3, #32]
 8002590:	e036      	b.n	8002600 <HAL_RCC_OscConfig+0x39c>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40021000 	.word	0x40021000
 8002598:	fffeffff 	.word	0xfffeffff
 800259c:	fffbffff 	.word	0xfffbffff
 80025a0:	40007000 	.word	0x40007000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x362>
 80025ac:	4bb6      	ldr	r3, [pc, #728]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	4bb5      	ldr	r3, [pc, #724]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	438a      	bics	r2, r1
 80025b6:	621a      	str	r2, [r3, #32]
 80025b8:	4bb3      	ldr	r3, [pc, #716]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	4bb2      	ldr	r3, [pc, #712]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025be:	2104      	movs	r1, #4
 80025c0:	438a      	bics	r2, r1
 80025c2:	621a      	str	r2, [r3, #32]
 80025c4:	e01c      	b.n	8002600 <HAL_RCC_OscConfig+0x39c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x384>
 80025ce:	4bae      	ldr	r3, [pc, #696]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	4bad      	ldr	r3, [pc, #692]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025d4:	2104      	movs	r1, #4
 80025d6:	430a      	orrs	r2, r1
 80025d8:	621a      	str	r2, [r3, #32]
 80025da:	4bab      	ldr	r3, [pc, #684]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	4baa      	ldr	r3, [pc, #680]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	621a      	str	r2, [r3, #32]
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0x39c>
 80025e8:	4ba7      	ldr	r3, [pc, #668]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025ea:	6a1a      	ldr	r2, [r3, #32]
 80025ec:	4ba6      	ldr	r3, [pc, #664]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025ee:	2101      	movs	r1, #1
 80025f0:	438a      	bics	r2, r1
 80025f2:	621a      	str	r2, [r3, #32]
 80025f4:	4ba4      	ldr	r3, [pc, #656]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	4ba3      	ldr	r3, [pc, #652]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80025fa:	2104      	movs	r1, #4
 80025fc:	438a      	bics	r2, r1
 80025fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d014      	beq.n	8002632 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7ff f956 	bl	80018b8 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	e009      	b.n	8002626 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7ff f951 	bl	80018b8 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	4a9b      	ldr	r2, [pc, #620]	; (800288c <HAL_RCC_OscConfig+0x628>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e12b      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	4b98      	ldr	r3, [pc, #608]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	2202      	movs	r2, #2
 800262c:	4013      	ands	r3, r2
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x3ae>
 8002630:	e013      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7ff f941 	bl	80018b8 <HAL_GetTick>
 8002636:	0003      	movs	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263a:	e009      	b.n	8002650 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7ff f93c 	bl	80018b8 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	4a91      	ldr	r2, [pc, #580]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e116      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	4b8d      	ldr	r3, [pc, #564]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	2202      	movs	r2, #2
 8002656:	4013      	ands	r3, r2
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800265a:	231f      	movs	r3, #31
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002664:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	4b87      	ldr	r3, [pc, #540]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 800266a:	4989      	ldr	r1, [pc, #548]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800266c:	400a      	ands	r2, r1
 800266e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2210      	movs	r2, #16
 8002676:	4013      	ands	r3, r2
 8002678:	d063      	beq.n	8002742 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d12a      	bne.n	80026d8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002682:	4b81      	ldr	r3, [pc, #516]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002686:	4b80      	ldr	r3, [pc, #512]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002688:	2104      	movs	r1, #4
 800268a:	430a      	orrs	r2, r1
 800268c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800268e:	4b7e      	ldr	r3, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002692:	4b7d      	ldr	r3, [pc, #500]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002694:	2101      	movs	r1, #1
 8002696:	430a      	orrs	r2, r1
 8002698:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7ff f90d 	bl	80018b8 <HAL_GetTick>
 800269e:	0003      	movs	r3, r0
 80026a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026a4:	f7ff f908 	bl	80018b8 <HAL_GetTick>
 80026a8:	0002      	movs	r2, r0
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0e3      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026b6:	4b74      	ldr	r3, [pc, #464]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	2202      	movs	r2, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	d0f1      	beq.n	80026a4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80026c0:	4b71      	ldr	r3, [pc, #452]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	22f8      	movs	r2, #248	; 0xf8
 80026c6:	4393      	bics	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	00da      	lsls	r2, r3, #3
 80026d0:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80026d2:	430a      	orrs	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
 80026d6:	e034      	b.n	8002742 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	3305      	adds	r3, #5
 80026de:	d111      	bne.n	8002704 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80026e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80026e6:	2104      	movs	r1, #4
 80026e8:	438a      	bics	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	22f8      	movs	r2, #248	; 0xf8
 80026f2:	4393      	bics	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	00da      	lsls	r2, r3, #3
 80026fc:	4b62      	ldr	r3, [pc, #392]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
 8002702:	e01e      	b.n	8002742 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002708:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 800270a:	2104      	movs	r1, #4
 800270c:	430a      	orrs	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002710:	4b5d      	ldr	r3, [pc, #372]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002714:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002716:	2101      	movs	r1, #1
 8002718:	438a      	bics	r2, r1
 800271a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271c:	f7ff f8cc 	bl	80018b8 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002726:	f7ff f8c7 	bl	80018b8 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0a2      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	d1f1      	bne.n	8002726 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d100      	bne.n	800274c <HAL_RCC_OscConfig+0x4e8>
 800274a:	e097      	b.n	800287c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274c:	4b4e      	ldr	r3, [pc, #312]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	220c      	movs	r2, #12
 8002752:	4013      	ands	r3, r2
 8002754:	2b08      	cmp	r3, #8
 8002756:	d100      	bne.n	800275a <HAL_RCC_OscConfig+0x4f6>
 8002758:	e06b      	b.n	8002832 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d14c      	bne.n	80027fc <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b49      	ldr	r3, [pc, #292]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b48      	ldr	r3, [pc, #288]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002768:	494a      	ldr	r1, [pc, #296]	; (8002894 <HAL_RCC_OscConfig+0x630>)
 800276a:	400a      	ands	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7ff f8a3 	bl	80018b8 <HAL_GetTick>
 8002772:	0003      	movs	r3, r0
 8002774:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002778:	f7ff f89e 	bl	80018b8 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e079      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	049b      	lsls	r3, r3, #18
 8002792:	4013      	ands	r3, r2
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002796:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	220f      	movs	r2, #15
 800279c:	4393      	bics	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80027aa:	4b37      	ldr	r3, [pc, #220]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <HAL_RCC_OscConfig+0x634>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	431a      	orrs	r2, r3
 80027be:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	0449      	lsls	r1, r1, #17
 80027ce:	430a      	orrs	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff f871 	bl	80018b8 <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff f86c 	bl	80018b8 <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e047      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	049b      	lsls	r3, r3, #18
 80027f6:	4013      	ands	r3, r2
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x578>
 80027fa:	e03f      	b.n	800287c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002802:	4924      	ldr	r1, [pc, #144]	; (8002894 <HAL_RCC_OscConfig+0x630>)
 8002804:	400a      	ands	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff f856 	bl	80018b8 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002812:	f7ff f851 	bl	80018b8 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e02c      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	049b      	lsls	r3, r3, #18
 800282c:	4013      	ands	r3, r2
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x5ae>
 8002830:	e024      	b.n	800287c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e01f      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002844:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	025b      	lsls	r3, r3, #9
 8002850:	401a      	ands	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	429a      	cmp	r2, r3
 8002858:	d10e      	bne.n	8002878 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	220f      	movs	r2, #15
 800285e:	401a      	ands	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	23f0      	movs	r3, #240	; 0xf0
 800286c:	039b      	lsls	r3, r3, #14
 800286e:	401a      	ands	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b008      	add	sp, #32
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	40021000 	.word	0x40021000
 800288c:	00001388 	.word	0x00001388
 8002890:	efffffff 	.word	0xefffffff
 8002894:	feffffff 	.word	0xfeffffff
 8002898:	ffc2ffff 	.word	0xffc2ffff

0800289c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0b3      	b.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <HAL_RCC_ClockConfig+0x184>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2201      	movs	r2, #1
 80028b6:	4013      	ands	r3, r2
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d911      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x184>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2201      	movs	r2, #1
 80028c4:	4393      	bics	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <HAL_RCC_ClockConfig+0x184>)
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x184>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2201      	movs	r2, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e09a      	b.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2202      	movs	r2, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	d015      	beq.n	8002918 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2204      	movs	r2, #4
 80028f2:	4013      	ands	r3, r2
 80028f4:	d006      	beq.n	8002904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028f6:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 80028fc:	21e0      	movs	r1, #224	; 0xe0
 80028fe:	00c9      	lsls	r1, r1, #3
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	22f0      	movs	r2, #240	; 0xf0
 800290a:	4393      	bics	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	4b44      	ldr	r3, [pc, #272]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	d040      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	029b      	lsls	r3, r3, #10
 8002932:	4013      	ands	r3, r2
 8002934:	d114      	bne.n	8002960 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06e      	b.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	049b      	lsls	r3, r3, #18
 800294a:	4013      	ands	r3, r2
 800294c:	d108      	bne.n	8002960 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e062      	b.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e05b      	b.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2203      	movs	r2, #3
 8002966:	4393      	bics	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7fe ffa0 	bl	80018b8 <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297c:	e009      	b.n	8002992 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297e:	f7fe ff9b 	bl	80018b8 <HAL_GetTick>
 8002982:	0002      	movs	r2, r0
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <HAL_RCC_ClockConfig+0x18c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e042      	b.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	220c      	movs	r2, #12
 8002998:	401a      	ands	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1ec      	bne.n	800297e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_RCC_ClockConfig+0x184>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	4013      	ands	r3, r2
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d211      	bcs.n	80029d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_RCC_ClockConfig+0x184>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2201      	movs	r2, #1
 80029b8:	4393      	bics	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_RCC_ClockConfig+0x184>)
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x184>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2201      	movs	r2, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e020      	b.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2204      	movs	r2, #4
 80029dc:	4013      	ands	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_RCC_ClockConfig+0x190>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029f4:	f000 f820 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80029f8:	0001      	movs	r1, r0
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x188>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	220f      	movs	r2, #15
 8002a02:	4013      	ands	r3, r2
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <HAL_RCC_ClockConfig+0x194>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	000a      	movs	r2, r1
 8002a0a:	40da      	lsrs	r2, r3
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x198>)
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe ff0b 	bl	800182c <HAL_InitTick>
  
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b004      	add	sp, #16
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	00001388 	.word	0x00001388
 8002a2c:	fffff8ff 	.word	0xfffff8ff
 8002a30:	080032f4 	.word	0x080032f4
 8002a34:	20000000 	.word	0x20000000

08002a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b08f      	sub	sp, #60	; 0x3c
 8002a3c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a3e:	2314      	movs	r3, #20
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a46:	c313      	stmia	r3!, {r0, r1, r4}
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	4a29      	ldr	r2, [pc, #164]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a52:	c313      	stmia	r3!, {r0, r1, r4}
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a60:	2300      	movs	r3, #0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	220c      	movs	r2, #12
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d002      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x4a>
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d003      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x50>
 8002a80:	e02d      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a82:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a86:	e02d      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2214      	movs	r2, #20
 8002a92:	18ba      	adds	r2, r7, r2
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	1d3a      	adds	r2, r7, #4
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	025b      	lsls	r3, r3, #9
 8002aac:	4013      	ands	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ab2:	4812      	ldr	r0, [pc, #72]	; (8002afc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ab4:	f7fd fb28 	bl	8000108 <__udivsi3>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	001a      	movs	r2, r3
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	4353      	muls	r3, r2
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac6:	000a      	movs	r2, r1
 8002ac8:	0152      	lsls	r2, r2, #5
 8002aca:	1a52      	subs	r2, r2, r1
 8002acc:	0193      	lsls	r3, r2, #6
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	185b      	adds	r3, r3, r1
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ada:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002adc:	e002      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ae2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b00f      	add	sp, #60	; 0x3c
 8002aec:	bd90      	pop	{r4, r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	080032d4 	.word	0x080032d4
 8002af4:	080032e4 	.word	0x080032e4
 8002af8:	40021000 	.word	0x40021000
 8002afc:	007a1200 	.word	0x007a1200

08002b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01e      	b.n	8002b50 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223d      	movs	r2, #61	; 0x3d
 8002b16:	5c9b      	ldrb	r3, [r3, r2]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	223c      	movs	r2, #60	; 0x3c
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7fe fb7b 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	223d      	movs	r2, #61	; 0x3d
 8002b32:	2102      	movs	r1, #2
 8002b34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f000 fa27 	bl	8002f94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	223d      	movs	r2, #61	; 0x3d
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b002      	add	sp, #8
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2207      	movs	r2, #7
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d007      	beq.n	8002b92 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d124      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11d      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4252      	negs	r2, r2
 8002bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 f9c0 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002be4:	e007      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f9b3 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 f9bf 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2204      	movs	r2, #4
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d125      	bne.n	8002c56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2204      	movs	r2, #4
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d11e      	bne.n	8002c56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	4252      	negs	r2, r2
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2202      	movs	r2, #2
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	23c0      	movs	r3, #192	; 0xc0
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 f993 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002c3e:	e007      	b.n	8002c50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 f986 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f000 f992 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d124      	bne.n	8002cae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d11d      	bne.n	8002cae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2209      	movs	r2, #9
 8002c78:	4252      	negs	r2, r2
 8002c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 f967 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002c96:	e007      	b.n	8002ca8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f95a 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f966 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d125      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d11e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2211      	movs	r2, #17
 8002cd0:	4252      	negs	r2, r2
 8002cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	23c0      	movs	r3, #192	; 0xc0
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f93a 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e007      	b.n	8002d02 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f92d 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 f939 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d10f      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d108      	bne.n	8002d36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4252      	negs	r2, r2
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 f907 	bl	8002f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d10f      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d108      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2281      	movs	r2, #129	; 0x81
 8002d58:	4252      	negs	r2, r2
 8002d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 fa78 	bl	8003254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d10f      	bne.n	8002d92 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2240      	movs	r2, #64	; 0x40
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d108      	bne.n	8002d92 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2241      	movs	r2, #65	; 0x41
 8002d86:	4252      	negs	r2, r2
 8002d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 f8f9 	bl	8002f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d108      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2221      	movs	r2, #33	; 0x21
 8002db4:	4252      	negs	r2, r2
 8002db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 fa42 	bl	8003244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	223c      	movs	r2, #60	; 0x3c
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIM_ConfigClockSource+0x18>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e0ab      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x170>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223c      	movs	r2, #60	; 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	223d      	movs	r2, #61	; 0x3d
 8002dec:	2102      	movs	r1, #2
 8002dee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2277      	movs	r2, #119	; 0x77
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_TIM_ConfigClockSource+0x178>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d100      	bne.n	8002e1a <HAL_TIM_ConfigClockSource+0x52>
 8002e18:	e06b      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x12a>
 8002e1a:	d80e      	bhi.n	8002e3a <HAL_TIM_ConfigClockSource+0x72>
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d100      	bne.n	8002e22 <HAL_TIM_ConfigClockSource+0x5a>
 8002e20:	e077      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x14a>
 8002e22:	d803      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x64>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d100      	bne.n	8002e2a <HAL_TIM_ConfigClockSource+0x62>
 8002e28:	e073      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e2a:	e07c      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d100      	bne.n	8002e32 <HAL_TIM_ConfigClockSource+0x6a>
 8002e30:	e06f      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x14a>
 8002e32:	2b30      	cmp	r3, #48	; 0x30
 8002e34:	d100      	bne.n	8002e38 <HAL_TIM_ConfigClockSource+0x70>
 8002e36:	e06c      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002e38:	e075      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e3a:	2b70      	cmp	r3, #112	; 0x70
 8002e3c:	d00e      	beq.n	8002e5c <HAL_TIM_ConfigClockSource+0x94>
 8002e3e:	d804      	bhi.n	8002e4a <HAL_TIM_ConfigClockSource+0x82>
 8002e40:	2b50      	cmp	r3, #80	; 0x50
 8002e42:	d036      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xea>
 8002e44:	2b60      	cmp	r3, #96	; 0x60
 8002e46:	d044      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002e48:	e06d      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	0152      	lsls	r2, r2, #5
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d068      	beq.n	8002f24 <HAL_TIM_ConfigClockSource+0x15c>
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	0192      	lsls	r2, r2, #6
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d017      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002e5a:	e064      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f000 f978 	bl	8003160 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2277      	movs	r2, #119	; 0x77
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
      break;
 8002e88:	e04d      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6899      	ldr	r1, [r3, #8]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f000 f961 	bl	8003160 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	01c9      	lsls	r1, r1, #7
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
      break;
 8002eb0:	e039      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	f000 f8d4 	bl	800306c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2150      	movs	r1, #80	; 0x50
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 f92e 	bl	800312c <TIM_ITRx_SetConfig>
      break;
 8002ed0:	e029      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	001a      	movs	r2, r3
 8002ee0:	f000 f8f2 	bl	80030c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2160      	movs	r1, #96	; 0x60
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 f91e 	bl	800312c <TIM_ITRx_SetConfig>
      break;
 8002ef0:	e019      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	001a      	movs	r2, r3
 8002f00:	f000 f8b4 	bl	800306c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2140      	movs	r1, #64	; 0x40
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 f90e 	bl	800312c <TIM_ITRx_SetConfig>
      break;
 8002f10:	e009      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f000 f905 	bl	800312c <TIM_ITRx_SetConfig>
      break;
 8002f22:	e000      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002f24:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	223d      	movs	r2, #61	; 0x3d
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	223c      	movs	r2, #60	; 0x3c
 8002f32:	2100      	movs	r1, #0
 8002f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b004      	add	sp, #16
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	ffff00ff 	.word	0xffff00ff

08002f44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a2b      	ldr	r2, [pc, #172]	; (8003054 <TIM_Base_SetConfig+0xc0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <TIM_Base_SetConfig+0x20>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <TIM_Base_SetConfig+0xc4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d108      	bne.n	8002fc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2270      	movs	r2, #112	; 0x70
 8002fb8:	4393      	bics	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a22      	ldr	r2, [pc, #136]	; (8003054 <TIM_Base_SetConfig+0xc0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00f      	beq.n	8002fee <TIM_Base_SetConfig+0x5a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a21      	ldr	r2, [pc, #132]	; (8003058 <TIM_Base_SetConfig+0xc4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_Base_SetConfig+0x5a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a20      	ldr	r2, [pc, #128]	; (800305c <TIM_Base_SetConfig+0xc8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <TIM_Base_SetConfig+0x5a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <TIM_Base_SetConfig+0xcc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_Base_SetConfig+0x5a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <TIM_Base_SetConfig+0xd0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <TIM_Base_SetConfig+0xd4>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	4393      	bics	r3, r2
 8003006:	001a      	movs	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <TIM_Base_SetConfig+0xc0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <TIM_Base_SetConfig+0xcc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <TIM_Base_SetConfig+0xd0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d103      	bne.n	8003046 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	615a      	str	r2, [r3, #20]
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40002000 	.word	0x40002000
 8003060:	40014400 	.word	0x40014400
 8003064:	40014800 	.word	0x40014800
 8003068:	fffffcff 	.word	0xfffffcff

0800306c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	2201      	movs	r2, #1
 8003084:	4393      	bics	r3, r2
 8003086:	001a      	movs	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	22f0      	movs	r2, #240	; 0xf0
 8003096:	4393      	bics	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	220a      	movs	r2, #10
 80030a8:	4393      	bics	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	621a      	str	r2, [r3, #32]
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b006      	add	sp, #24
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	2210      	movs	r2, #16
 80030da:	4393      	bics	r3, r2
 80030dc:	001a      	movs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <TIM_TI2_ConfigInputStage+0x60>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	031b      	lsls	r3, r3, #12
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	22a0      	movs	r2, #160	; 0xa0
 8003104:	4393      	bics	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b006      	add	sp, #24
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	ffff0fff 	.word	0xffff0fff

0800312c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2270      	movs	r2, #112	; 0x70
 8003140:	4393      	bics	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	2207      	movs	r2, #7
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	609a      	str	r2, [r3, #8]
}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <TIM_ETR_SetConfig+0x3c>)
 8003178:	4013      	ands	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	021a      	lsls	r2, r3, #8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	431a      	orrs	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4313      	orrs	r3, r2
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}
 800319c:	ffff00ff 	.word	0xffff00ff

080031a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	223c      	movs	r2, #60	; 0x3c
 80031ae:	5c9b      	ldrb	r3, [r3, r2]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e03c      	b.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	223c      	movs	r2, #60	; 0x3c
 80031bc:	2101      	movs	r1, #1
 80031be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	223d      	movs	r2, #61	; 0x3d
 80031c4:	2102      	movs	r1, #2
 80031c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2270      	movs	r2, #112	; 0x70
 80031dc:	4393      	bics	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a11      	ldr	r2, [pc, #68]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10c      	bne.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	4393      	bics	r3, r2
 800320c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	223d      	movs	r2, #61	; 0x3d
 8003224:	2101      	movs	r1, #1
 8003226:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	223c      	movs	r2, #60	; 0x3c
 800322c:	2100      	movs	r1, #0
 800322e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400

08003244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <__libc_init_array>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	2600      	movs	r6, #0
 8003268:	4d0c      	ldr	r5, [pc, #48]	; (800329c <__libc_init_array+0x38>)
 800326a:	4c0d      	ldr	r4, [pc, #52]	; (80032a0 <__libc_init_array+0x3c>)
 800326c:	1b64      	subs	r4, r4, r5
 800326e:	10a4      	asrs	r4, r4, #2
 8003270:	42a6      	cmp	r6, r4
 8003272:	d109      	bne.n	8003288 <__libc_init_array+0x24>
 8003274:	2600      	movs	r6, #0
 8003276:	f000 f821 	bl	80032bc <_init>
 800327a:	4d0a      	ldr	r5, [pc, #40]	; (80032a4 <__libc_init_array+0x40>)
 800327c:	4c0a      	ldr	r4, [pc, #40]	; (80032a8 <__libc_init_array+0x44>)
 800327e:	1b64      	subs	r4, r4, r5
 8003280:	10a4      	asrs	r4, r4, #2
 8003282:	42a6      	cmp	r6, r4
 8003284:	d105      	bne.n	8003292 <__libc_init_array+0x2e>
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	00b3      	lsls	r3, r6, #2
 800328a:	58eb      	ldr	r3, [r5, r3]
 800328c:	4798      	blx	r3
 800328e:	3601      	adds	r6, #1
 8003290:	e7ee      	b.n	8003270 <__libc_init_array+0xc>
 8003292:	00b3      	lsls	r3, r6, #2
 8003294:	58eb      	ldr	r3, [r5, r3]
 8003296:	4798      	blx	r3
 8003298:	3601      	adds	r6, #1
 800329a:	e7f2      	b.n	8003282 <__libc_init_array+0x1e>
 800329c:	08003304 	.word	0x08003304
 80032a0:	08003304 	.word	0x08003304
 80032a4:	08003304 	.word	0x08003304
 80032a8:	08003308 	.word	0x08003308

080032ac <memset>:
 80032ac:	0003      	movs	r3, r0
 80032ae:	1812      	adds	r2, r2, r0
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d100      	bne.n	80032b6 <memset+0xa>
 80032b4:	4770      	bx	lr
 80032b6:	7019      	strb	r1, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	e7f9      	b.n	80032b0 <memset+0x4>

080032bc <_init>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr

080032c8 <_fini>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr
